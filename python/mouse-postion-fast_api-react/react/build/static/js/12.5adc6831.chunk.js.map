{"version":3,"sources":["ui-component/cards/SubCard.tsx","store/actions/dashboard.ts","store/actions/models.ts","store/actions/index.ts","views/secunity-ui/Table/table_model/TableHeader.tsx","views/dashboard/Info/mystyle.module.css","views/dashboard/header/style_header_dashborad.ts","views/dashboard/header/HeaderDashBoard.tsx","views/secunity-ui/component/attack_info/AttackCard.tsx","views/secunity-ui/component/attack_info/AttackDash.tsx","views/secunity-ui/Apexchart/style_chart.ts","views/secunity-ui/Apexchart/ApexLineChart.tsx","views/secunity-ui/Table/TablePaginationDash.tsx","views/secunity-ui/Table/table_dash/style_table_dash.ts","views/secunity-ui/Table/table_dash/TableDash.tsx","views/dashboard/Default/style_main_dashborad.ts","views/dashboard/Default/TableDashAttack.tsx","views/dashboard/Default/TableDashRows.tsx","views/dashboard/Default/index.tsx","views/dashboard/Info/CardAttack.tsx","views/dashboard/Info/index.tsx","views/dashboard/MainDashboard.tsx","views/secunity-ui/Table/table_report/RowTable.tsx","views/secunity-ui/Table/table_report/TableBase.tsx","views/dashboard/header/tabs_options.tsx","views/dashboard/index.tsx"],"names":["SubCard","React","forwardRef","ref","children","content","className","contentClass","secondary","sx","contentSX","title","others","theme","useTheme","useIntl","formatMessage","id","error","console","log","border","alignContent","margin","borderColor","palette","mode","dark","light","primary","boxShadow","p","textAlign","variant","action","opacity","defaultProps","transfom_to_signed","obj","model","NavigationEnum","NETWORKS_TABLE","signed_right","pydict","signed_left","DEVICES_TABLE","set_dashbord","body","dispatch","a","model_id","split","objApi","post","success","type","SET_DASHBOARD","type_form","get_model_by_id","get","submit_form","obj_id","obj_to_send","edit","includes","ans","delete_item","delete","flow_action","model_name","model_flow","set_models","options","url","some","word","SET_MODELS","actions","dashboardActions","modelsActions","useActions","useDispatch","bindActionCreators","EnhancedTableHead","props","order","orderBy","headers","map","headCell","align","padding","m","sortDirection","label","pr","color","module","exports","style_header_dashborad","tabs_header_dashboard_card","width","height","tabs_header_dashboard_grid","container","xs","pt","mt","justifyItems","justifyContent","tabs","indicatorColor","textColor","mb","py","px","mr","display","flexDirection","alignItems","bottom","tab","fontSize","iconPosition","HeaderDashBoard","tabsOption","navigate","HocNavigate","params","val","localStorage","getItem","useState","parseInt","value","setValue","useEffect","undefined","style","Grid","Tabs","onChange","e","newValue","setItem","toString","request_navigate","handleChange","index","Tab","href","get_prefix_to_navigate","onClick","event","preventDefault","a11yProps","AttackCard","attacks","incoming_flow","permissions","useAuth","devices_flows","set_devices_flows","item","lg","borderRadius","direction","attack","Object","keys","stat","key","normliaze_bps","normliaze_pps","text","Typography","length","device","icon_close","ACCOUNT_TYPE","ISP","ROOT","type_account","accounts","account","Divider","orientation","flexItem","ATTACKS_TABLE","Button","autoFocus","endIcon","Language","SHOW_IN_ATTACKS","IconButton","size","style_card","main_card","backgroundColor","ml","position","zIndex","grid_content","spacing","gridSpacing","grid_devices_flows","divider","borderRightWidth","grid_src_dst","grid_src_dst_header","grid_src_dst_typography_header","grid_src_dst_body","grid_src_dst_typography_body","minWidth","grid_other","grid_other_field","CardContent","ATTACK_FIELDS","IP","MASK","PORTS","field","DESTINATION","SOURCE","key2","PROTOCOL","PACKET_LENGTH","TCP_FLAGS","FRAGMENT","ICMP_CODE","ICMP_TYPE","filter","flag","Chip","AttackDash","dashboard_class","useSelector","state","dashboard","devices","get_merege_model","merege_attacks","flows","lead_time","totals","max_time","FLOWS_TABLE","att","flow","destination","array_obj_to_obj","account_network_device","client_flowspec","bps","STATICTICS","BPS","pps","PPS","lineChartOptions","chart","zoom","enabled","plotOptions","line","bar","horizontal","columnWidth","endingShape","colors","successDark","orangeMain","successMain","orangeDark","errorLight","dataLabels","stroke","curve","xaxis","labels","datetimeUTC","successLight","secondaryMain","primaryMain","fill","legend","show","fontFamily","offsetX","offsetY","showForSingleSeries","useSeriesColors","markers","radius","onItemClick","toggleDataSeries","itemMargin","vertical","grid","grey200","tooltip","y","formatter","series","seriesIndex","dataPointIndex","w","toLowerCase","globals","seriesNames","x","format","yaxis","tickAmount","grey700","ApexLineChart","series_data","xaxis_categories","indexs_to_show","series_state","setSeries","Array","bool_series","set_bool_series","savedCallback","useRef","create_min_max_for_chart","seris_to_set","min_max","object_equals","JSON","stringify","min","max","setOptions","prevState","indexOf","handle_legendClick","temp_bool","current","events","legendClick","chartContext","categories","shared","TablePagination1","rows","rowsPerPage","pagination_model","context","getPostsApi","useApi","handleChangePage","newPage","get_body_dashboard","pages","request","rows_per_page","rowsPerPageOptions","component","TablePagination","count","page","num","get_page","onPageChange","style_table_dashborad","checkbox_header","header","table_main","table_row","table_cell_icons","pl","table_grid_icons","icon_sx","cursor","checkbox_cell","cell_report_icon","item_table_cell","list_report_icon","item_report_icon","TableList","cells","headCells","selected","handleSelectAllClick","handleClick","checkbox","signed_ids","colors_map","signed_key","total","func_add","row_to_show","stableSort","containsAllCompleted","every","c","find","containsPart","emptyRows","pinned","PINNED","Checkbox","indeterminate","checked","target","toLocaleUpperCase","intersection","r","TableContainer","Table","TableBody","row","name","isItemSelected","labelId","show_add","has","model_under_attack","att_id","TableRow","hover","tabIndex","TableCell","ListItemIcon","HOLISTIC","ADD_SIGNED1","REMOVE_SIGNED1","inputProps","cell","colSpan","config","page_dash","style_main_dashborad","chart_card","chart_grid","md","xl","main_grid","table_attack_grid","table_model_grid","TableDashAttack","dashboard_data","generic_click","attack_table_key","attack_dash","headCellsAttack_dashboard","get_attacks","get_signed_objs_attacks","show_signed_attacks","TableDash","get_objs_attacks","Set","get_total_attacks","holistic","get_signed_objs","get_objs","get_total","TableDashRows","add_leading_row","model_table_key","show_signed_model","dict_to_array","get_signed_objs_model","my","has_client_flowspec_device","array_objs_array_value","get_objs_model","get_total_model","networks","network_dash","headCellsNetwork_dashboard","blackholes","BLACKHOLE","ManageDash","get_table_data","useParams","ADD_MANY_SIGNED1","singed","generic_click_util","SET_SELECTED","generic_handleSelectAllClick_util","loading","table","setTable","tableAttack","setTableAttack","setChart","global_attack","Headers_Enum","GLOBAL_ATTACKS","chart_line_name","DEVICES","TRAFFIC","calculate_chart","sa","sb","moment_lead_time","change_time_for_time_zone","array_times","create_time_arr_moment","TRAFFIC_BPS","TRAFFIC_PPS","down_attack_detail","reverse","CardWrapper","styled","MainCard","open","warning","overflow","background","top","right","CardInfo","marginLeft_size","primary_text","is_attack_or_info","secondary_text","under_attack","Box","List","ListItem","disableGutters","styles","close","ListItemText","fontWeight","flexGrow","left","FooterSubWrapper","breakpoints","up","marginLeft","Dashboard","gauge_bps_pps","setgauge_bps_pps","gauge_bps_pps_to_set","get_total_for_info","sm","CardAttack","arcsLength","nrOfLevels","arcPadding","cornerRadius","percent","gauge","marginTop","marginBottom","paddingTop","DashboardTabEnum","MainDashboard","dashboard_state","update_dashboard","timer","setInterval","clearInterval","RowTable","row_obj","handleDownload","download_url","filename","responseType","fileDownload","role","FileDownloadIcon","headerSX","toUpperCase","join","rowCount","ReportTableMain","setRows","report_fields","headCellsReport","fetch_data","get_report","rows_with_account","REPORTS","icon","tabsOption_filterd"],"mappings":"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","file":"static/js/12.5adc6831.chunk.js","sourcesContent":["import React, { ReactNode, Ref } from 'react';\r\nimport {  useIntl} from 'react-intl';\r\n\r\n\r\n\r\n\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\nexport interface SubCardProps {\r\n    children: ReactNode | string | null;\r\n    content?: boolean;\r\n    className?: string;\r\n    contentClass?: string;\r\n    // darkTitle?: boolean;\r\n    secondary?: ReactNode | string | {};\r\n    sx?: {};\r\n    contentSX?: {};\r\n    title?: ReactNode | string | {};\r\n}\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = React.forwardRef(\r\n    (\r\n        { children, className, content, contentClass,  secondary, sx = {}, contentSX = {}, title, ...others }: SubCardProps,\r\n        ref: Ref<HTMLDivElement>\r\n    ) => {\r\n        const theme = useTheme();\r\n        try{\r\n\r\n            if(typeof title==='string')\r\n                title = useIntl().formatMessage({id:title});\r\n                \r\n        }\r\n        catch(error){\r\n            console.log(title, error);\r\n            \r\n        }\r\n       \r\n        return (\r\n            <Card\r\n            \r\n                ref={ref}\r\n                \r\n                sx={{\r\n                    \r\n                    border: '1px solid',\r\n                    alignContent:'center',\r\n                    margin:'1rem',\r\n          \r\n            \r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                    ':hover': {\r\n                        boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                    },\r\n                    \r\n                    ...sx\r\n                \r\n                }}\r\n                {...others}\r\n            >\r\n                {/* card header and action */}\r\n                {title && (\r\n                    <CardHeader sx={{ p: 2.5, textAlign:'center',...contentSX }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />\r\n                )}\r\n                {/* {darkTitle && title && (\r\n                    <CardHeader sx={{ p: 2.5 , textAlign:'center',...contentSX }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />\r\n                )} */}\r\n{/* sx={{textAlign:'center'}} */}\r\n                {/* content & header divider */}\r\n                {title && (\r\n                    <Divider\r\n                        sx={{\r\n                            opacity: 1,\r\n                            borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent  sx={{ \r\n                        \r\n                        p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n","import { Dispatch } from \"redux\";\nimport { SET_DASHBOARD,\n  //  SET_SELECTED\n   } from \"store/state/type_actions\";\nimport { NavigationEnum } from \"types\";\nimport { pydict } from \"utils\";\nimport { objApi } from \"utils/api\";\n\nexport const transfom_to_signed =(obj:any, model:string)=>{\n  switch (model) {\n    case NavigationEnum.NETWORKS_TABLE:\n        return {\n          signed_right: pydict(obj,'attacks.signed_objs',{}),\n          signed_left: pydict(obj,'networks.signed_objs',[])}\n          \n    case NavigationEnum.DEVICES_TABLE:\n      return {\n        signed_right: pydict(obj,'flows.signed_objs',{}),\n      signed_left: pydict(obj,'devices.signed_objs',[])}\n      \n    default:\n      return {\n        signed_right: pydict(obj,'devices.signed_objs',[]),\n      signed_left: pydict(obj,'attacks.signed_objs',{})\n    }\n      \n}\n\n}\n\n\n\nexport const set_dashbord = (model: string, body={}) => async (dispatch:Dispatch)  => {\n  try {\n    const model_id= model.split('_')\n    model = model_id[1]\n    \n    const [success, obj] = await objApi.post(`/${model_id[0]}/dashboard/${model}`,body, dispatch);\n\n    if(success)\n    dispatch({\n        type: SET_DASHBOARD,\n        type_form: model,\n        obj\n    });\n    \n    // dispatch({ type: SET_SELECTED, model, obj:transfom_to_signed(obj, model) });\n\n} catch (error) {\n    console.log(error);\n    return false\n\n}\nreturn true\n\n  };\n\n\n  ","import { Dispatch } from 'redux';\nimport { SET_MODELS } from 'store/state/type_actions';\nimport { FLOW_ACTION } from 'types';\nimport { objApi } from 'utils/api';\n// import { get_table_data } from 'views/secunity-ui/Table';\n\nexport const get_model_by_id = (model: string, id: string) => async (dispatch: Dispatch) => {\n    await objApi.get(`/${model}/${id}`, dispatch);\n};\n\nexport const submit_form = (model: string, obj_id: string, obj_to_send: any) => async (dispatch: Dispatch) => {\n    \n    const edit: boolean = typeof obj_id === 'string' && !['', 'add'].includes(obj_id);\n    const ans =await objApi.post(`/${model}/${edit ? `${obj_id}/edit` : 'add'}`, obj_to_send, dispatch);\n    \n    return ans\n};\nexport const delete_item = (model: string, obj_id: string ) => async (dispatch: any) => {\n    // const edit: boolean = typeof obj_id === 'string' && !['', 'add'].includes(obj_id);\n    const ans:any = await objApi.delete(`/${model}/${obj_id}/delete`, dispatch);\n\n\n    return ans[0];\n};\nexport const flow_action = (model: string, obj_id: string,action:FLOW_ACTION, model_name:string) => async (dispatch: any) => {\n    // const ans:any = await objApi.post(`/outgoing/action/${obj_id}/${action}`,{}, dispatch);\n    const ans:any = await objApi.post(`/${model}/action/${obj_id}/${action}`,{}, dispatch);\n    if(ans[0]){\n        const model_flow = `${model.split('_')[0]}_${model_name}`\n        await  dispatch(set_models(model_flow, { options: [\"extended\",'general',] }));\n\n    }\n\n    return ans[0];\n};\n\n\n\n\nexport const set_models = (model: string, body:any) => async (dispatch:any)  => {\n    const url = ['active', 'cooldown'].some(word => model.includes(word))?`${model.split('_')[0]}/attacks/${model.split('_')[1]}`:model;\n    \n\n        const [success, obj] =await objApi.post(`/${url}`, body, dispatch);\n        model = model.split('_')[1]\n        if(success)\n        dispatch({\n            type: SET_MODELS,\n            [model]: obj,\n        }) \n\n  };\n\n\n  ","import { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n// import ActionCreators from \"../redux/actions\";\nimport * as dashboardActions from \"./dashboard\";\nimport * as modelsActions from \"./models\";\n\n\nconst actions = {\n  ...dashboardActions,\n  ...modelsActions,\n};\nexport const useActions = () => {\n  const dispatch = useDispatch();\n  return bindActionCreators(actions, dispatch);\n};\n","// import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\n// material-ui\nimport {\n    // Box,\n    TableCell,\n    TableHead,\n    TableRow,\n    // TableSortLabel,\n    Typography\n} from '@mui/material';\n// import { visuallyHidden } from '@mui/utils';\n\n// project imports\n// import Chip from 'ui-component/extended/Chip';\n\n// assets\n\nimport {  EnhancedTableHeadProps,     HeadCell\n} from 'types';\n\n\nexport interface OrderListEnhancedTableHeadProps extends EnhancedTableHeadProps {\n    headers:any;\n    action?:boolean\n}\n\nexport function EnhancedTableHead(props: OrderListEnhancedTableHeadProps) {\n    const {  order, orderBy, headers,   action } = props;\n    \n    // const createSortHandler = (property: string) => (event: React.SyntheticEvent<Element, Event>) => {\n    //     onRequestSort(event, property);\n    // };\n// const {headers} = props\n    \n\n    return (\n        <TableHead>\n            <TableRow>\n               \n                  {  headers.map((headCell:HeadCell) => (\n                        <TableCell\n                        // style={{width:'20rem'}}\n                            key={headCell.id}\n                            align={headCell.align}\n                            padding='normal'\n                            sx={{m:13}}\n                            // padding={headCell.disablePadding ? 'none' : 'normal'}\n                            sortDirection={orderBy === headCell.id ? order : false}\n                        >\n                            {/* <TableSortLabel\n                                active={orderBy === headCell.id}\n                                direction={orderBy === headCell.id ? order : 'asc'}\n                                onClick={createSortHandler(headCell.id)}\n                            > */}\n                                {headCell.label}\n                                {/* {orderBy === headCell.id ? (\n                                    <Box component=\"span\" sx={visuallyHidden}>\n                                        {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                    </Box>\n                                ) : null} */}\n                            {/* </TableSortLabel> */}\n                        </TableCell>\n                    ))}\n           {    action&&     <TableCell sortDirection={false} align=\"center\" sx={{ pr: 1}}>\n                        <Typography variant=\"subtitle1\" sx={{ color:  'grey.900' }}>\n                        <FormattedMessage id=\"action\" />\n\n                        </Typography>\n                    </TableCell>}\n            </TableRow>\n        </TableHead>\n    );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"close\":\"mystyle_close__4bpTA\"};","const style_header_dashborad: any = {\n    tabs_header_dashboard_card :{ sx:{width: 1.0, height: '2.9rem' }},\n    tabs_header_dashboard_grid: { container: true,  xs: 12, pt:0, mt:-3.5, justifyItems:'end', justifyContent:'end'},\n    tabs: { indicatorColor: \"primary\",  textColor: \"primary\",  variant:'scrollable',sx:{\n        width:1.0,\n        height:'1rem',\n        mb: 5,\n        '& a': { \n            py: 1.5,\n            px: 1,\n            mr: 2.25,\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center'\n        },\n\n        '& .MuiTabs-indicator': {\n            bottom: 0\n        },\n        '& a > svg': {\n            mr: 1.25\n        }\n    }},\n    tab: {sx:{width:'20%',pt:0,mt:0, fontSize:'1.2  rem'}, iconPosition:'end'},\n}\n    export default style_header_dashborad\n\n    // const style = model !== NavigationEnum.ATTACKS_TABLE ? { xs: 12, md: 8, lg: 3, xl: 1.65, p: -2 } : { xs: 12, md: 8, lg: 2, xl: 1.5 };\n    // ","import React from 'react';\n \nimport {\n    Grid, Tab, Tabs,\n} from '@mui/material';\n\nimport SubCard from 'ui-component/cards/SubCard';\n\n\n\nimport HocNavigate from 'common/hooks/useNavigate';\nimport style from './style_header_dashborad';\n\n\nfunction a11yProps(index: number) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n\n\n\n\n \n\nconst HeaderDashBoard = ({tabsOption}:any) => {\n \n    const navigate = HocNavigate();\n    const { model_name,id } = navigate.params\n    const val =  localStorage.getItem('dashboard_tab') || '0'\n    const [value, setValue] = React.useState(parseInt(val, 10) );\n\n    const handleChange = (newValue: number) => {\n        localStorage.setItem('dashboard_tab', newValue.toString())\n        setValue(newValue);\n        navigate.request_navigate(`dashboard/${tabsOption[newValue].label}`)\n \n\n    };\n    React.useEffect(() => {\n        id!==undefined &&setValue(parseInt(localStorage.getItem('dashboard_tab') || '0', 10))\n\n    }, [model_name]);\n\n \n    return (\n        <SubCard {...style.tabs_header_dashboard_card}>\n         \n            <Grid {...style.tabs_header_dashboard_grid} >\n                <Tabs\n                    value={value}\n                    onChange={(e, newValue) => handleChange(newValue)}\n                    {...style.tabs}>\n                    \n                    {tabsOption.map((tab:any, index:number) => (\n                        <Tab  href={`${navigate.get_prefix_to_navigate( )}dashboard/${tab.label}`} \n                        onClick={event => {\n                            event.preventDefault();\n                          }}\n                        key={index} {...tab} {...style.tab} {...a11yProps(index)} />\n                    ))}\n                </Tabs>\n            </Grid>\n        </SubCard>\n    );\n};\n\nexport default HeaderDashBoard;","import { useEffect, useState } from 'react';\r\n\r\nimport {\r\n    CardContent,\r\n    Divider,\r\n    Grid,\r\n    Typography,\r\n    // Checkbox,\r\n    IconButton,\r\n    // ListItemButton,\r\n    Chip,\r\n    Button\r\n} from '@mui/material';\r\n// import { useDispatch } from 'react-redux';\r\n\r\n// project imports\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport { gridSpacing } from 'store/template/constant';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport HocNavigate from 'common/hooks/useNavigate';\r\n\r\nimport { Attack } from 'types/dashboard';\r\n// import { SET_SELECTED } from 'store/state/type_actions';\r\nimport DisabledByDefaultIcon from '@mui/icons-material/DisabledByDefault';\r\nimport { ACCOUNT_TYPE, ATTACK_FIELDS, NavigationEnum } from 'types';\r\nimport { normliaze_bps, pydict, normliaze_pps } from 'utils';\r\nimport useAuth from 'common/hooks/useAuth';\r\nimport { Language } from 'types';\r\n\r\nexport interface PopularCardProps {\r\n    attacks: Attack[];\r\n    incoming_flow: any;\r\n}\r\n\r\nconst AttackCard = ({ attacks, incoming_flow }: PopularCardProps) => {\r\n    const navigate = HocNavigate();\r\n    const { model_name } = navigate.params;\r\n    \r\n    const { permissions } = useAuth();\r\n\r\n    const [devices_flows, set_devices_flows] = useState<any>(null);\r\n    const style: any = {\r\n        grid_devices_flows: { item: true, lg: 5.3, m: 1, mt: 0, borderRadius: 3, border: '1px dashed', direction: 'row' },\r\n        sub_grid_devices_flows: { item: true, direction: 'row' },\r\n        grid_checkbox_devices_flows: { item: true, display: 'flex', justifyContent: 'center', alignItems: 'center' },\r\n        grid_value_num: { item: true, display: 'flex', justifyContent: 'space-between', direction: 'row' },\r\n        grid_inner_value_num: { alignItems: 'space-between', p: 1, display: 'flex', direction: 'column' },\r\n        typography_value_num: { variant: 'subtitle1', color: 'inherit', textAlign: 'center' },\r\n        grid_device: { item: true, display: 'flex', alignItems: 'center', direction: 'column', mb: 2 },\r\n        typography_device: { variant: 'h4', color: 'primary.dark', textAlign: 'center' }\r\n    };\r\n    useEffect(() => {\r\n        set_devices_flows(\r\n            attacks.map((attack: Attack) => (\r\n                <Grid {...style.grid_devices_flows}>\r\n                    <Grid {...style.sub_grid_devices_flows}>\r\n                        <Grid {...style.grid_value_num}>\r\n                            {Object.keys(attack.stat).map((key: string) => {\r\n                                const { value, text } = key === 'bps' ? normliaze_bps(attack.stat[key]) : normliaze_pps(attack.stat[key]);\r\n                                return (\r\n                                    <Grid {...style.grid_inner_value_num}>\r\n                                        <Typography {...style.typography_value_num}>\r\n                                            {text.length > 0 ? `${value}|${text}` : value}\r\n                                        </Typography>\r\n                                        <Typography {...style.typography_value_num}>{key}</Typography>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid {...style.grid_device}>\r\n                        <Typography {...style.typography_device}>{attack.device}</Typography>\r\n                        <Typography {...style.typography_device}>\r\n                            <FormattedMessage id=\"device\" />\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            ))\r\n        );\r\n    }, [attacks, incoming_flow]);\r\n\r\n    const navigate_to_attacks = () => {\r\n        const value = incoming_flow.id;\r\n        // const value   =  attack['incoming_flow']\r\n        localStorage.setItem('dashboard_tab', '2');\r\n\r\n        navigate.request_navigate(`dashboard/attacks/${value}`);\r\n    };\r\n\r\n    const style_icon_close: any = {\r\n        grid: { display: 'flex', direction: 'row' }\r\n    };\r\n    const icon_close = (\r\n        <Grid {...style_icon_close.grid}>\r\n            {[ACCOUNT_TYPE.ISP, ACCOUNT_TYPE.ROOT].includes(permissions.type_account) && (\r\n                <Typography color=\"secondary\" mt={1.5} mr={2}>\r\n                    {permissions.accounts[incoming_flow.account]}\r\n                    <Divider orientation=\"vertical\" flexItem />\r\n                </Typography>\r\n            )}\r\n            {model_name !== NavigationEnum.ATTACKS_TABLE && (\r\n                <Button sx={{ mr: 12 }} autoFocus onClick={navigate_to_attacks} endIcon={<DashboardIcon />}>\r\n                    <FormattedMessage id={Language.SHOW_IN_ATTACKS} />\r\n                </Button>\r\n            )}\r\n\r\n            <Divider orientation=\"vertical\" flexItem />\r\n\r\n            <IconButton\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                onClick={() => {\r\n                    navigate.request_navigate(`dashboard/${model_name}`);\r\n                }}\r\n            >\r\n                <DisabledByDefaultIcon sx={{ fontSize: '1.3rem' }} />\r\n            </IconButton>\r\n        </Grid>\r\n    );\r\n    const style_card: any = {\r\n        main_card: {\r\n            contentSX: { m: -2.5, p: -1.5 },\r\n            sx: { backgroundColor: 'secondary.light', ml: '2%', width: '96%', position: 'sticky', height: 'auto', bottom: 0, zIndex: 11 }\r\n        },\r\n        grid_content: { item: true, lg: 12, display: 'flex', direction: 'row', spacing: gridSpacing },\r\n        grid_devices_flows: { container: true, lg: 4, xs: 6, display: 'flex', direction: 'row', sx: { justifyContent: 'space-between' } },\r\n        divider: { flexItem: true, orientation: 'vertical', sx: { borderRightWidth: 3, borderColor: 'primary.dark' } },\r\n        grid_src_dst: { item: true, lg: 6, xs: 12, ml: 2, display: 'flex', direction: 'row' },\r\n        grid_src_dst_header: { item: true, mt: 3, lg: 2, display: 'flex', direction: 'column' },\r\n        grid_src_dst_typography_header: { mt: 1, variant: 'body1', textAlign: 'center' },\r\n        grid_src_dst_body: { item: true, lg: 4, xs: 12, display: 'flex', direction: 'column' },\r\n        grid_src_dst_typography_body: { mt: 1, minWidth: '5rem',  },\r\n        grid_other: { container: true, lg: 2, ml: 1, display: 'flex', direction: 'column' },\r\n        grid_other_field: { item: true,  mb: 1, display: 'flex', direction: 'row' ,justifyContent: 'space-between'},\r\n    };\r\n\r\n    return (\r\n        <SubCard title=\"ATTACK DETAILS\" secondary={icon_close} {...style_card.main_card}>\r\n            <CardContent>\r\n                <Grid {...style_card.grid_content}>\r\n                    <Grid {...style_card.grid_devices_flows}>{devices_flows}</Grid>\r\n                    <Divider {...style_card.divider} />\r\n                    <Grid {...style_card.grid_src_dst}>\r\n                        <Grid {...style_card.grid_src_dst_header}>\r\n                            {[ATTACK_FIELDS.IP, ATTACK_FIELDS.MASK, ATTACK_FIELDS.PORTS, ].map((field: ATTACK_FIELDS) => (\r\n                                <Typography {...style_card.grid_src_dst_typography_header}>{field}</Typography>\r\n                            ))}\r\n                        </Grid>\r\n\r\n                        {[ATTACK_FIELDS.DESTINATION, ATTACK_FIELDS.SOURCE].map((key: string) => (\r\n                            <Grid {...style_card.grid_src_dst_body}>\r\n                                <Typography variant=\"button\">\r\n                            <FormattedMessage id={key} />\r\n                                   </Typography>\r\n\r\n                                {[ATTACK_FIELDS.IP, ATTACK_FIELDS.MASK, ATTACK_FIELDS.PORTS, ].map((key2: string) => (\r\n                                <Typography {...style_card.grid_src_dst_typography_body}>\r\n                                    {`${pydict(incoming_flow,`${key}.${key2}`,'--').toString()}`}</Typography>\r\n                                    ))}\r\n                            </Grid>\r\n                        ))}\r\n                        <Divider {...style_card.divider} />\r\n\r\n                        <Grid {...style_card.grid_other}>\r\n\r\n                            {[ ATTACK_FIELDS.PROTOCOL ,ATTACK_FIELDS.PACKET_LENGTH, ATTACK_FIELDS.TCP_FLAGS, ATTACK_FIELDS.FRAGMENT , ATTACK_FIELDS.ICMP_CODE , ATTACK_FIELDS.ICMP_TYPE ].filter((field:ATTACK_FIELDS)=> field in incoming_flow)\r\n                            .map((field:ATTACK_FIELDS)=>\r\n                <Grid {...style_card.grid_other_field}>\r\n                            \r\n                            <Typography minWidth=\"6rem\" variant=\"button\" >\r\n                            <FormattedMessage id={field} />\r\n\r\n                            </Typography>\r\n                            {\r\n                               field===ATTACK_FIELDS.TCP_FLAGS ? pydict(incoming_flow, field, []).map((flag: string) => (\r\n                                    <Chip\r\n                                        label={flag}\r\n                                        size=\"small\"\r\n                                        color=\"primary\"\r\n                                        sx={{ mb: 1 }}\r\n                                    />\r\n                                )):        <Typography minWidth=\"5rem\"  textAlign=\"center\">\r\n                                {pydict(incoming_flow, field, '')}\r\n                            </Typography>\r\n                            }\r\n                    \r\n                        </Grid>\r\n\r\n                            )}\r\n                  \r\n                    </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default AttackCard;\r\n","import { useSelector } from 'react-redux';\r\nimport AttackCard from './AttackCard';\r\n\r\nimport { ATTACK_FIELDS, DefaultRootStateProps, NavigationEnum } from 'types';\r\nimport { pydict } from 'utils/transformation/pydict';\r\nimport { array_obj_to_obj } from 'utils';\r\nimport { Attack } from 'types/dashboard';\r\nimport { Dashborad } from 'types/dashboard/Dashboard';\r\n\r\n\r\nconst AttackDash = ({ model_name, id }: any) => {\r\n    const dashboard_class: Dashborad = pydict(\r\n        useSelector((state: DefaultRootStateProps) => state.dashboard),\r\n        `${model_name}.dashboard_class`,\r\n        false\r\n    );\r\n\r\n    if (id !== undefined && dashboard_class) {\r\n        const [device, attack] = [\r\n            dashboard_class.devices.get_merege_model(),\r\n            pydict(dashboard_class.merege_attacks(), `${id}.flow`, { flows: {} }),\r\n        ];\r\n\r\n        const lead_time = dashboard_class.totals.max_time\r\n\r\n        const flows: Attack[] = Object.keys(pydict(attack, NavigationEnum.FLOWS_TABLE, {}))\r\n            .map((key: string) =>  dashboard_class.flows[key])\r\n            .map((att: any) => {\r\n                return {\r\n                    ...att.flow.destination,\r\n                    device: att.flow.device\r\n                        ? att.flow.device\r\n                        : array_obj_to_obj(device, att.flow.account_network_device) &&\r\n                          array_obj_to_obj(device, att.flow.account_network_device).client_flowspec,\r\n                    id: att.flow.id,\r\n\r\n                    stat: {\r\n                        bps: pydict(att, `${ATTACK_FIELDS.STATICTICS}.${lead_time}.${ATTACK_FIELDS.BPS}`, 0),\r\n                        pps: pydict(att, `${ATTACK_FIELDS.STATICTICS}.${lead_time}.${ATTACK_FIELDS.PPS}`, 0)\r\n                    }\r\n                };\r\n            });\r\n\r\n        return <AttackCard attacks={flows} incoming_flow={attack} />;\r\n    }\r\n    return null;\r\n};\r\nexport default AttackDash;\r\n\r\n//gilad\r\n// if link capaicty pass device... show some message\r\n","import value from 'assets/scss/_themes-vars.module.scss';\n// chart options\nexport const lineChartOptions = {\n    chart: {\n        height: 350,\n        type: 'line',\n        zoom: {\n            enabled: true\n        }\n    },\n    plotOptions: {\n        line: {},\n        bar: {\n            horizontal: false,\n            columnWidth: '35%',\n            endingShape: 'rounded'\n        }\n    },\n    colors: [value.successDark, value.orangeMain, value.successMain, value.orangeDark, value.errorLight],\n\n    dataLabels: {\n        style: {\n            colors: ['#F44336', '#E91E63', '#9C27B0']\n        },\n        enabled: false\n    },\n    stroke: {\n        curve: 'smooth',\n        width: [2, 2, 4]\n    },\n    xaxis: {\n        type: 'datetime',\n        labels: {\n            datetimeUTC: false,\n            style: {\n                colors: [value.successLight, value.secondaryMain, value.primaryMain, value.successDark]\n            }\n        }\n    },\n\n    fill: {\n        opacity: 1\n    },\n\n    legend: {\n        show: true,\n        fontSize: '15.875rem',\n        fontFamily: `'Roboto', sans-serif`,\n        position: 'bottom',\n        offsetX: 10,\n        offsetY: 10,\n        showForSingleSeries: true,\n\n        labels: {\n            useSeriesColors: true\n        },\n        markers: {\n            width: 16,\n            height: 16,\n            radius: 5\n        },\n        onItemClick: {\n            toggleDataSeries: true\n        },\n        itemMargin: {\n            horizontal: 15,\n            vertical: 8\n        }\n\n    },\n\n    grid: {\n        borderColor: value.grey200\n    },\n    tooltip: {\n        y: {\n            title: {\n                formatter: (val: any, { series, seriesIndex, dataPointIndex, w }: any) => {\n                    \n                    return val.toLowerCase().includes('traffic') && dataPointIndex % 5 !== 0 ? '' : val;\n                }\n            },\n            formatter: (val: any, { series, seriesIndex, dataPointIndex, w }: any) => {\n                return w.globals.seriesNames[seriesIndex].toLowerCase().includes('traffic') && dataPointIndex % 5 !== 0 ? '' : val;\n            }\n        },\n\n        x: {\n            format: 'HH:mm'\n        },\n        theme: 'light'\n    },\n    yaxis: {\n        tickAmount: 8,\n        labels: {\n            style: {\n                colors: [value.grey700]\n            }\n        }\n    }\n};\n","import { useState, useEffect,useRef} from 'react';\r\nimport ReactApexChart, { Props as ChartProps } from 'react-apexcharts';\r\nimport { create_min_max_for_chart, object_equals,  } from 'utils';\r\nimport { lineChartOptions } from './style_chart';\r\n\r\ntype UiInput = {\r\n    series_data: any;\r\n    xaxis_categories: any;\r\n    bps?: boolean;\r\n    indexs_to_show:number[]\r\n};\r\n\r\nfunction ApexLineChart({  series_data, xaxis_categories, bps,indexs_to_show }: UiInput) {\r\n\r\n \r\n    const [series_state, setSeries] = useState<any>([]);\r\n    const [bool_series, set_bool_series] = useState<any>(Array(series_data.length).fill(true));\r\n    const savedCallback: any = useRef();\r\n    useEffect(() => {\r\n        const { seris_to_set, min_max } = create_min_max_for_chart(series_data, bool_series, bps);\r\n        // if(JSON.stringify(seris_to_set)!== JSON.stringify(series_state))\r\n        if(!object_equals(seris_to_set, series_state))\r\n        {\r\n            console.log('dsf');\r\n            \r\n            // setSeries(seris_to_set);\r\n        }\r\n            if(JSON.stringify(min_max)!== JSON.stringify({min: options.yaxis.min, max:options.yaxis.max})){\r\n        setOptions((prevState) => ({\r\n            ...prevState,\r\n         \r\n            yaxis: {\r\n              ...prevState.yaxis,\r\n                ...min_max,\r\n                labels: {\r\n                    ...prevState.yaxis.labels,\r\n                    formatter: (val: string) => {\r\n                        \r\n                        return `${val} ${seris_to_set[bool_series.indexOf(true)>-1 ?bool_series.indexOf(true):0].text}`;\r\n                    }\r\n                }\r\n  \r\n            },\r\n\r\n        }));\r\n    }\r\n    }, [  bool_series]);\r\n    const handle_legendClick = (seriesIndex:number )=>{\r\n        const temp_bool = [...bool_series]\r\n        temp_bool[seriesIndex] = !temp_bool[seriesIndex]\r\n        \r\n        set_bool_series(temp_bool)\r\n    }\r\n    useEffect(() => {\r\n        savedCallback.current = handle_legendClick;\r\n    }, [handle_legendClick]);\r\n \r\n    const [options, setOptions] = useState<ChartProps>({...lineChartOptions,\r\n        chart: {\r\n            ...lineChartOptions.chart,\r\n              events: {\r\n                  legendClick: (chartContext:any, seriesIndex:number )=> {\r\n                    savedCallback.current(seriesIndex)\r\n                  }},   \r\n      \r\n          },\r\n    });\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        \r\n\r\n        \r\n        const { seris_to_set, min_max } = create_min_max_for_chart(series_data, bool_series, bps);\r\n        if(!object_equals(seris_to_set, series_state))\r\n        setSeries(seris_to_set);\r\n        if(JSON.stringify(min_max)!== JSON.stringify({min: options.yaxis.min, max:options.yaxis.max}))\r\n        setOptions((prevState) => ({\r\n            ...prevState,\r\n        \r\n            xaxis: {\r\n              ...prevState.xaxis,\r\n                categories: xaxis_categories,\r\n            \r\n            },\r\n            tooltip: {\r\n                shared: false,\r\n                y: {\r\n                    title: {\r\n                        formatter: (val: any, { series, seriesIndex, dataPointIndex, w }: any) => {\r\n                            \r\n                            return val.toLowerCase().includes('traffic') && !indexs_to_show.includes( dataPointIndex)? '' : val;\r\n                        }\r\n                    },\r\n                    formatter: (val: any, { series, seriesIndex, dataPointIndex, w }: any) => {\r\n                       \r\n                        return w.globals.seriesNames[seriesIndex].toLowerCase().includes('traffic') && !indexs_to_show.includes( dataPointIndex) ? '' : val;\r\n                    }\r\n                },\r\n        \r\n                x: {\r\n                    format: 'HH:mm'\r\n                },\r\n                theme: 'light'\r\n            },\r\n            yaxis: {\r\n              ...prevState.yaxis,\r\n                ...min_max,\r\n                labels: {\r\n                    ...prevState.yaxis.labels,\r\n                    formatter: (val: string) => {\r\n                        \r\n                        return `${val} ${seris_to_set[bool_series.indexOf(true)>-1 ?bool_series.indexOf(true):0].text}`;\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n    }, [series_data]);\r\n    return (\r\n        <div id=\"chart\">\r\n            <ReactApexChart options={options} series={series_state} type=\"line\" height={350} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ApexLineChart;\r\n","import * as React from 'react';\n\nimport { TablePagination } from '@mui/material';\nimport { useActions } from 'store/actions';\nimport { DefaultRootStateProps } from 'types';\n// import { array_objs_array_value, pydict } from 'utils';\nimport {  useSelector } from 'react-redux';\n// import config from 'config';\nimport useApi from 'common/hooks/useApi';\nimport HocNavigate from 'common/hooks/useNavigate';\n\ninterface Pagination {\n    rows: number;\n    rowsPerPage: any;\n    pagination_model: boolean;\n    model: string;\n}\nconst TablePagination1 = ({ rows,   rowsPerPage, pagination_model, model }: Pagination) => {\n    const { set_dashbord } = useActions();\n    const navigate = HocNavigate();\n\n    const { model_name } = navigate.params;\n    const context = useSelector((state: DefaultRootStateProps) => state.dashboard[model_name as 'networks']);\n    const get_page = ()=>{\n        const pages = (navigate.params.page ? navigate.params.page.split('-') : [1, 1]).map((num:any)=>parseInt(num,10));\n        return (model_name=== model|| model.includes(model_name as string)?pages[0]:pages[1]) - 1\n    }\n\n    \n    const getPostsApi =   useApi(set_dashbord)\n \n    const handleChangePage = async(event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, newPage: number) => {\n        \n        const [body, pages] = navigate.get_body_dashboard(newPage+1, model, context)\n               \n       const ans = await getPostsApi.request(model_name as string, body);\n       \n       if(ans){\n\n           navigate.request_navigate(`dashboard/${model_name}/p/${pages}`)\n        }\n    };\n\n \n\n    const rows_per_page = pagination_model\n        ? {\n              rowsPerPageOptions: [5, 15, 25],\n              component: 'div'\n          }\n        : {\n              rowsPerPageOptions: []\n          };\n\n    return (\n        <TablePagination\n            // rowsPerPageOptions={[5, 10, 25]}\n            // component=\"div\"\n            {...rows_per_page}\n            count={rows}\n            rowsPerPage={rowsPerPage}\n            page={get_page()}\n            onPageChange={handleChangePage}\n            // onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n    );\n};\n\nexport default TablePagination1;\n"," const style_table_dashborad: any = {\n        checkbox_header: { sx: { p: 0, pr: 4, m: 0, color: 'primary' } },\n        header: {\n            content: false,\n            contentSX: { m: -1.5, p: -1.5 }\n        },\n        table_main: { sx: { minWidth: 70 } },\n        table_row: { sx: { height: 8 } },\n        table_cell_icons: { padding: 'checkbox', sx: { pl: 2, pr: -2, mr: -4 } },\n        table_grid_icons: { display: 'flex', direction: 'row', padding: 0 },\n        icon_sx: { cursor: 'pointer', fontSize: '1.3rem' },\n        checkbox_cell: { color: 'primary', sx: { p: 0, ml: -1 } },\n        cell_report_icon: { sx: { p: 0.1, m: 1 } },\n        item_table_cell: { sx: { p: 0.1 } },\n        list_report_icon: { sx: { mt: 0.4, ml: 0.5, mr:-2 } },\n        item_report_icon: { sx: { fontSize: '1.3rem', color: 'error.dark' } }\n    };\n    export default style_table_dashborad","// material-ui\r\nimport { Checkbox, Table, ListItemIcon, TableBody, TableCell, TableContainer, TableRow, Grid } from '@mui/material';\r\n// import TablePagination1 from './TablePagination';\r\nimport TablePagination1 from '../TablePaginationDash';\r\nimport { useIntl } from 'react-intl';\r\nimport {\r\n    IconButton,\r\n\r\n} from '@mui/material';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport HocNavigate from 'common/hooks/useNavigate';\r\n\r\nimport ReportIcon from '@mui/icons-material/Report';\r\nimport ArrowCircleUp from '@mui/icons-material/ArrowCircleUp';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n// import { EnhancedTableHead } from './TableHeader';\r\nimport { intersection } from 'lodash';\r\n\r\n// assets\r\nimport { DefaultRootStateProps, HeadCell, Language, NavigationEnum } from 'types';\r\nimport { stableSort } from 'utils';\r\nimport { ADD_SIGNED1, REMOVE_SIGNED1 } from 'store/state/type_actions';\r\nimport config from 'config';\r\nimport style from './style_table_dash';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport interface TableDashProps {\r\n    cells: string[];\r\n    model_name: NavigationEnum;\r\n    rows: any[];\r\n    headCells: HeadCell[];\r\n    selected: string[];\r\n    handleSelectAllClick?: any;\r\n    handleClick?: any;\r\n    checkbox: boolean;\r\n    colors_map?: any;\r\n    signed_ids?: any;\r\n    signed_key?: NavigationEnum;\r\n    model?: string;\r\n    total?: number;\r\n    func_add?: any;\r\n}\r\nconst TableList = ({\r\n    cells,\r\n    rows,\r\n    headCells,\r\n    model_name,\r\n    selected,\r\n    handleSelectAllClick,\r\n    handleClick,\r\n    checkbox,\r\n    colors_map,\r\n    signed_ids,\r\n    signed_key,\r\n    model,\r\n    total,\r\n    func_add\r\n}: TableDashProps) => {\r\n    const dispatch = useDispatch();\r\n\r\n    // console.log(colors_map);\r\n    const navigate = HocNavigate();\r\n\r\n    const row_to_show = rows.length > 0 && rows[0]['compere'] !== undefined ? stableSort(rows) : rows;\r\n    if(selected===undefined)\r\n    selected=[]\r\n    const containsAllCompleted =  rows.every((c) => selected.find((x) => x === c.id));\r\n    const containsPart = rows.some((c) => selected.find((x) => x === c.id));\r\n\r\n    const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n    const emptyRows = rows.length === 0 ? 5 : 0;\r\n    const context = useSelector((state: DefaultRootStateProps) => state.context[model as string]);\r\n    const pinned = useIntl().formatMessage({ id: Language.PINNED });\r\n    \r\n    return (\r\n        <SubCard\r\n            title={\r\n                <>\r\n                       {checkbox && <Checkbox\r\n                            {...style.checkbox_header}\r\n                            indeterminate={selected.length > 0 && containsPart && !containsAllCompleted}\r\n                            checked={rows.length > 0 && containsAllCompleted}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>)=>\r\n                                {handleSelectAllClick(e.target.checked, signed_key, signed_ids===undefined)}}\r\n                        />}\r\n                    {`${signed_ids===undefined? pinned:''} ${model_name?.toLocaleUpperCase()} (${\r\n                        checkbox\r\n                            ? intersection(\r\n                                  selected,\r\n                                  rows.map((r: any) => r['id'])\r\n                              ).length\r\n                            : rows.length\r\n                    } total)`}\r\n                </>\r\n            }\r\n            {...style.header}\r\n        >\r\n            {/* table */}\r\n            <TableContainer>\r\n                <Table {...style.table_main}>\r\n                    <TableBody>\r\n                        {row_to_show.map((row: any, index: number) => {\r\n                            if (typeof row === 'number') return null;\r\n                            const isItemSelected = isSelected(row['id']);\r\n                            const labelId = `enhanced-table-checkbox-${index}`;\r\n                            let show_add = false;\r\n                            try {\r\n                                show_add = signed_ids && !signed_ids.has(row['id']);\r\n                            } catch (error) {\r\n                                show_add = false;\r\n                            }\r\n\r\n                            const model_under_attack =\r\n                                (model !== NavigationEnum.ATTACKS_TABLE &&\r\n                                    row[NavigationEnum.ATTACKS_TABLE] &&\r\n                                    [NavigationEnum.NETWORKS_TABLE, NavigationEnum.DEVICES_TABLE].includes(model_name)) ||\r\n                                (model === NavigationEnum.ATTACKS_TABLE &&\r\n                                    [NavigationEnum.NETWORKS_TABLE].includes(model_name) &&\r\n                                    row[NavigationEnum.ATTACKS_TABLE] &&\r\n                                    context.attacks.some((att_id: string) => row[NavigationEnum.ATTACKS_TABLE].includes(att_id)));\r\n                            return (\r\n                                <TableRow\r\n                                    hover\r\n                                    aria-checked={isItemSelected}\r\n                                    {...style.table_row}\r\n                                    tabIndex={-1}\r\n                                    key={index}\r\n                                    selected={isItemSelected}\r\n                                >\r\n                                    {checkbox && (\r\n                                        <TableCell {...style.table_cell_icons}>\r\n                                            <Grid {...style.table_grid_icons}>\r\n                                                {signed_key && (\r\n                                                    <ListItemIcon\r\n                                                        sx={{\r\n                                                            ml: -1.2,\r\n                                                            mt: [NavigationEnum.ATTACKS_TABLE, NavigationEnum.HOLISTIC].includes(model_name) ? 1.5 : 0,\r\n                                                            mr: -0.2\r\n                                                        }}\r\n                                                    >\r\n                                                        {show_add ? (\r\n                                                            <ArrowCircleUp\r\n                                                                onClick={() => {\r\n                                                                    \r\n                                                                    dispatch({\r\n                                                                        type: ADD_SIGNED1,\r\n                                                                        model,\r\n                                                                        signed_key,\r\n                                                                        obj: row\r\n                                                                    });\r\n                                                                    if (\r\n                                                                        ![\r\n                                                                            NavigationEnum.ATTACKS_TABLE,\r\n                                                                            NavigationEnum.HOLISTIC\r\n                                                                        ].includes(signed_key) &&\r\n                                                                        model !== NavigationEnum.ATTACKS_TABLE\r\n                                                                    ) {\r\n                                                                        func_add(row);\r\n                                                                    }\r\n                                                                }}\r\n                                                                sx={{ ...style.icon_sx, color: 'primary.dark' }}\r\n                                                            />\r\n                                                        ) : (\r\n                                                            !signed_ids && (\r\n                                                                <CancelIcon\r\n                                                                    onClick={() => {\r\n                                                                        dispatch({\r\n                                                                            type: REMOVE_SIGNED1,\r\n                                                                            model,\r\n                                                                            signed_key,\r\n                                                                            id: row['id']\r\n                                                                        });\r\n                                                                    }}\r\n                                                                    sx={{\r\n                                                                        ...style.icon_sx,\r\n\r\n                                                                        color: 'error.dark'\r\n                                                                    }}\r\n                                                                />\r\n                                                            )\r\n                                                        )}\r\n                                                    </ListItemIcon>\r\n                                                )}\r\n                                                <Checkbox\r\n                                                    onClick={(event) => handleClick(row['id'],  signed_key, signed_ids===undefined)}\r\n                                                    {...style.checkbox_cell}\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{\r\n                                                        'aria-labelledby': labelId\r\n                                                    }}\r\n                                                />\r\n\r\n                                                {[NavigationEnum.ATTACKS_TABLE, NavigationEnum.HOLISTIC].includes(model_name) && \r\n                                                            <IconButton color=\"primary\" size=\"large\" sx={{ml:-1.1,mr:-1.3}} \r\n                                                            onClick={() => {navigate.request_navigate(`dashboard/${navigate.params.model_name}/${row['id']}`) }} >\r\n                                                            <InfoIcon sx={{ fontSize: '1.3rem' }} />\r\n                                                        </IconButton>\r\n                                                // <ToolTip attack_id={row['id']} />\r\n                                                }\r\n                                            </Grid>\r\n                                        </TableCell>\r\n                                    )}\r\n\r\n                                    {[NavigationEnum.NETWORKS_TABLE, NavigationEnum.DEVICES_TABLE].includes(\r\n                                        model_name as NavigationEnum\r\n                                    ) && (\r\n                                        <TableCell {...style.cell_report_icon}>\r\n                                            <ListItemIcon {...style.list_report_icon}>\r\n                                                {model_under_attack && <ReportIcon {...style.item_report_icon} />}\r\n                                            </ListItemIcon>\r\n                                        </TableCell>\r\n                                    )}\r\n\r\n                                    {cells.map((cell: string) => (\r\n                                        <TableCell {...style.item_table_cell}>\r\n                                            {cell === 'ip_m' ? `${row['ip']}/${row['mask']}` : row[cell]}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                        {emptyRows > 0 && (\r\n                            <TableRow\r\n                                style={{\r\n                                    height: 53 * emptyRows\r\n                                }}\r\n                            >\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {signed_ids && (config.page_dash < rows.length || (total && config.page_dash < total)) ? (\r\n                <Grid mt={-1.5} mb={-2.5}>\r\n                    <TablePagination1\r\n                        model={model_name}\r\n                        pagination_model={false}\r\n                        rows={total || rows.length}\r\n                        rowsPerPage={config.page_dash}\r\n                    />\r\n                </Grid>\r\n            ) : null}\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default TableList;\r\n","const style_main_dashborad = {\n    chart_card :{ contentSX:{ m: -2.5, p: -1.5 }},\n    chart_grid: { item: true,  xs: 12, md: 8, lg:6, xl:8.5, ml: -3, mr:-3},\n    main_grid: { container: true,  xs: 12,  justifyContent:'center'},\n    table_attack_grid: { item: true,  xs: 12,  md: 4, lg: 3.5, xl: 2.1,},\n    table_model_grid: { item: true,  xs: 12,  md: 4, lg: 3.5, xl: 1.65},\n}\n    export default style_main_dashborad\n\n    // const style = model !== NavigationEnum.ATTACKS_TABLE ? { xs: 12, md: 8, lg: 3, xl: 1.65, p: -2 } : { xs: 12, md: 8, lg: 2, xl: 1.5 };\n    // "," \nimport { Grid } from '@mui/material';\n\nimport TableDash, { TableDashProps } from 'views/secunity-ui/Table/table_dash/TableDash';\nimport {\n    headCellsAttack_dashboard,\n    NavigationEnum,\n    attack_dash,\n} from 'types';\nimport {    pydict,} from 'utils';\nimport {\n    get_attacks,\n} from '../../../utils/dashboard/help_function';\nimport style from './style_main_dashborad';\n\nimport { Dashborad } from 'types/dashboard/Dashboard';\n\nconst TableDashAttack = ({ dashboard_data, model_name, generic_click, context, model,    handleSelectAllClick }: any) => {\n    \n    const dashboard_class :Dashborad= pydict(dashboard_data, `dashboard_class`, {})\n    const signed_key = dashboard_class.attack_table_key\n    \n    \n\n    const props:TableDashProps = {\n        model: model_name,\n        checkbox: true,\n        selected:[],\n        handleClick: generic_click,\n        cells: attack_dash,\n        headCells: headCellsAttack_dashboard,\n        signed_key,\n        model_name: NavigationEnum.ATTACKS_TABLE,\n        rows: get_attacks(dashboard_class.get_signed_objs_attacks())\n    };\n    return (\n        <Grid {...style.table_attack_grid}>\n            {dashboard_class.show_signed_attacks() && <TableDash {...props} selected={context.attacks}\n                handleSelectAllClick={handleSelectAllClick}\n            \n            />}\n\n            <TableDash\n                handleSelectAllClick={handleSelectAllClick}\n                {...props}\n                selected={context.attacks}\n                rows={get_attacks(dashboard_class.get_objs_attacks())}\n                signed_ids={new Set(Object.keys(dashboard_class.get_signed_objs_attacks()))}\n                total={dashboard_class.get_total_attacks()}\n            />\n{Object.keys(dashboard_class.holistic.get_signed_objs()).length!==0&&\n            <TableDash\n                handleSelectAllClick={handleSelectAllClick}\n                {...props}\n                selected={context.holistic}\n                signed_key={ NavigationEnum.HOLISTIC}\n                model_name={ NavigationEnum.HOLISTIC}\n                rows={get_attacks(dashboard_class.holistic.get_signed_objs())}\n                // total={dashboard_class.holistic.get_total()}\n            />}\n{Object.keys(dashboard_class.holistic.get_objs()).length!==0&&\n            <TableDash\n                handleSelectAllClick={handleSelectAllClick}\n                {...props}\n                selected={context.holistic}\n                signed_ids={new Set(Object.keys(dashboard_class.holistic.get_signed_objs()))}\n                signed_key={ NavigationEnum.HOLISTIC}\n                model_name={ NavigationEnum.HOLISTIC}\n                rows={get_attacks(dashboard_class.holistic.get_objs())}\n                total={dashboard_class.holistic.get_total()}\n            />}\n        </Grid>\n    );\n};\n\nexport default TableDashAttack","\n \nimport { Grid,  Divider } from '@mui/material';\n\nimport TableDash from 'views/secunity-ui/Table/table_dash/TableDash';\nimport {\n    headCellsNetwork_dashboard,\n    NavigationEnum,\n    network_dash,\n} from 'types';\nimport {\n \n    pydict,\n    array_objs_array_value,\n    dict_to_array,\n} from 'utils';\nimport style from './style_main_dashborad';\nimport { Dashborad } from 'types/dashboard/Dashboard';\n \n\nconst TableDashRows = ({\n    dashboard_data,\n    model_name,\n    generic_click,\n    headCells,\n    context,\n    model,\n    // rows,\n    cells,\n    permissions,\n    add_leading_row,\n    handleSelectAllClick\n}: any) => {\n\n    const dashboard_class :Dashborad= pydict(dashboard_data, `dashboard_class`, {})\n    const signed_key = dashboard_class.model_table_key\n    \n    \n\n\n    const selected =  context[signed_key];\n    const props = {\n        model: model_name,\n        checkbox: true,\n        handleClick: generic_click,\n        selected,\n        cells,\n        func_add: add_leading_row,\n        handleSelectAllClick,\n\n        headCells,\n        signed_key,\n        model_name: signed_key\n    };\n\n    return (\n        <Grid  {...style.table_model_grid}>\n            {dashboard_class.show_signed_model() && <TableDash {...props} rows={dict_to_array(dashboard_class.get_signed_objs_model())} headCells={headCells} />}\n            {dashboard_class.show_signed_model()  && <Divider sx={{ my: 1.5 }} />}\n\n            {(permissions.has_client_flowspec_device || signed_key !== NavigationEnum.DEVICES_TABLE) && (\n                <TableDash\n                    signed_ids={new Set(array_objs_array_value(dashboard_class.get_signed_objs_model(), 'id'))}\n                    rows={dict_to_array(dashboard_class.get_objs_model())}\n                    {...props}\n                    total={dashboard_class.get_total_model()}\n                />\n            )}\n\n            {model === NavigationEnum.ATTACKS_TABLE && dashboard_class.networks.get_total() > 0  && (\n                <TableDash\n                    cells={network_dash}\n                    rows={dict_to_array(dashboard_class.networks.get_objs())}\n                    headCells={headCellsNetwork_dashboard}\n                    model_name={NavigationEnum.NETWORKS_TABLE}\n                    model={ model_name}\n                signed_ids={false}\n\n                    selected={[]}\n                    checkbox={false}\n                />\n            )}\n            {dashboard_class.blackholes.get_total() > 0 && (\n                <TableDash\n                    {...props}\n                    rows={dict_to_array(dashboard_class.blackholes.get_objs())}\n                    model={model_name}\n                    selected={[]}\n                signed_ids={false}\n\n                    checkbox={false}\n                    cells={['cidr']}\n                    headCells={headCellsNetwork_dashboard}\n                    model_name={NavigationEnum.BLACKHOLE}\n                />\n            )}\n        </Grid>\n    );\n};\nexport default TableDashRows\n","import   { useEffect, useState } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport ReactLoading from 'react-loading';\r\nimport  { Moment } from 'moment';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport AttackDash from '../../secunity-ui/component/attack_info/AttackDash';\r\nimport { Grid } from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport ApexLineChart from 'views/secunity-ui/Apexchart/ApexLineChart';\r\n\r\nimport { DefaultRootStateProps, NavigationEnum, Model, Headers_Enum, ATTACK_FIELDS, DashboardTabEnum } from 'types';\r\nimport { change_time_for_time_zone, create_time_arr_moment } from 'types/mock/traffic';\r\nimport {\r\n    // add_compere_for_sort,\r\n    pydict,\r\n    calculate_chart,\r\n    get_table_data,\r\n    generic_click_util,\r\n    generic_handleSelectAllClick_util,\r\n    // get_attacks\r\n} from 'utils';\r\nimport {\r\n    ADD_MANY_SIGNED1,\r\n    // ADD_MANY_SIGNED1,\r\n    SET_SELECTED\r\n} from 'store/state/type_actions';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport useAuth from 'common/hooks/useAuth';\r\nimport TableDashAttack from './TableDashAttack';\r\nimport TableDashRows from './TableDashRows';\r\nimport style from './style_main_dashborad';\r\nimport { Dashborad } from 'types/dashboard/Dashboard';\r\n\r\n// todo work on calculate chart and on the chossing but before change the name in the context\r\n\r\nconst ManageDash = ({ model_name }: Model) => {\r\n    const { model, cells, headCells } = get_table_data(model_name);\r\n    const params = useParams();\r\n    const { id } = params;\r\n    const { permissions } = useAuth();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const dashboard_data = useSelector((state: DefaultRootStateProps) => state.dashboard[model_name]);\r\n    const context = useSelector((state: DefaultRootStateProps) => state.context[model_name]);\r\n\r\n    const dashboard_class: Dashborad = pydict(dashboard_data, `dashboard_class`, false);\r\n\r\n    const add_leading_row = (row: any) => {\r\n        pydict(row, dashboard_class.attack_table_key, []).length > 0 &&\r\n            dispatch({\r\n                type: ADD_MANY_SIGNED1,\r\n                model,\r\n                signed_key: dashboard_class.attack_table_key,\r\n                obj: row[dashboard_class.attack_table_key]\r\n            });\r\n    };\r\n\r\n    const generic_click = (name: string, type: DashboardTabEnum,singed:boolean) => {\r\n        const obj = generic_click_util(name, type, singed, dashboard_class, context);\r\n        dispatch({ type: SET_SELECTED, model, obj });\r\n    };\r\n\r\n \r\n    const handleSelectAllClick = (checked:boolean, type: DashboardTabEnum,singed:boolean) => {\r\n        const obj = generic_handleSelectAllClick_util(checked, type,singed, dashboard_class, context);\r\n        \r\n        dispatch({ type: SET_SELECTED, model, obj });\r\n    };\r\n \r\n \r\n    const loading = <ReactLoading type=\"cubes\" />;\r\n    const [table, setTable] = useState<JSX.Element>(loading);\r\n    const [tableAttack, setTableAttack] = useState<JSX.Element>(loading);\r\n    const [chart, setChart] = useState<JSX.Element>(loading);\r\n\r\n    const global_attack = useIntl().formatMessage({ id: Headers_Enum.GLOBAL_ATTACKS });\r\n    const chart_line_name = useIntl().formatMessage({\r\n        id: model !== NavigationEnum.NETWORKS_TABLE ? Headers_Enum.DEVICES : Headers_Enum.TRAFFIC\r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n        if (dashboard_class) {\r\n            setTableAttack(\r\n                <TableDashAttack\r\n                    model_name={model_name}\r\n                    handleSelectAllClick={handleSelectAllClick}\r\n                    generic_click={generic_click}\r\n                    context={context}\r\n                    model={model}\r\n                    dashboard_data={dashboard_data}\r\n                />\r\n            );\r\n\r\n            setTable(\r\n                <TableDashRows\r\n                    add_leading_row={add_leading_row}\r\n                    dashboard_data={dashboard_data}\r\n                    model_name={model_name}\r\n                    generic_click={generic_click}\r\n                    headCells={headCells}\r\n                    context={context}\r\n                    handleSelectAllClick={handleSelectAllClick}\r\n\r\n                    model={model}\r\n                    cells={cells}\r\n                    permissions={permissions}\r\n                />\r\n            );\r\n            let { sa, sb, indexs_to_show } = calculate_chart(dashboard_class, model, context, dashboard_data, chart_line_name, global_attack);\r\n            const moment_lead_time: Moment = change_time_for_time_zone(dashboard_class.totals.max_time);\r\n          \r\n            const array_times = create_time_arr_moment(moment_lead_time);\r\n                \r\n            if (!permissions.has_client_flowspec_device && model === NavigationEnum.ATTACKS_TABLE) {\r\n                sa = sa.filter((line: any) => !line.name.includes('FLOWS') && chart_line_name !== line.name);\r\n                sb = sb.filter((line: any) => !line.name.includes('FLOWS') && chart_line_name !== line.name);\r\n                indexs_to_show=[]\r\n            }\r\n            setChart(\r\n                <SubCard {...style.chart_card}>\r\n                    <SubCard title={ATTACK_FIELDS.TRAFFIC_BPS} {...style.chart_card}>\r\n                        <ApexLineChart indexs_to_show={indexs_to_show} series_data={sa} bps xaxis_categories={array_times} />\r\n                    </SubCard>\r\n                    <SubCard   title={ATTACK_FIELDS.TRAFFIC_PPS} {...style.chart_card}>\r\n                        <ApexLineChart  indexs_to_show={indexs_to_show} series_data={sb} xaxis_categories={array_times} />\r\n                    </SubCard>\r\n                </SubCard>\r\n            );\r\n        } else {\r\n            setTable(loading);\r\n            setTableAttack(loading);\r\n            setChart(loading);\r\n        }\r\n    }, [model_name, dashboard_data, context  ]);\r\n    \r\n    const down_attack_detail = <AttackDash id={id} model_name={model} />;\r\n    const ans: any[] = [\r\n        table,\r\n        <Grid {...style.chart_grid}>\r\n            {chart}\r\n            {down_attack_detail}\r\n        </Grid>,\r\n        tableAttack\r\n    ];\r\n\r\n    return <Grid {...style.main_grid}>{model !== NavigationEnum.ATTACKS_TABLE ? ans : ans.reverse()}</Grid>;\r\n};\r\nexport default ManageDash;\r\n","import { styled } from '@mui/material/styles';\r\nimport { Box, List, ListItem, ListItemText, Typography , Grid} from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ReportIcon from '@mui/icons-material/Report';\r\n// import ReportOffIcon from '@mui/icons-material/ReportOff';\r\nimport GppGoodIcon from '@mui/icons-material/GppGood';\r\n// assets\r\nimport styles from './mystyle.module.css';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n// interface MainStyleProps {\r\n//     theme: Theme;\r\n//     open: boolean;\r\n// }\r\nconst CardWrapper = styled(MainCard)(({ theme, open }) => ({\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.warning.light,\r\n    height: open?'91px':'80px',\r\n    width:open?'89px':'80px',\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    borderRadius:open?'120px':'100px',\r\n\r\n    '&:after': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(210.04deg, ${theme.palette.primary[200]} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\r\n        borderRadius: '50%',\r\n        top: -30,\r\n        right: -180\r\n    },\r\n    '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(140.9deg, ${theme.palette.primary[200]} -14.02%, rgba(144, 202, 249, 0) 77.58%)`,\r\n        borderRadius: '50%',\r\n        top: -160,\r\n        right: -130\r\n    },\r\n    '&:hover .my__unique__button__class-asdf123': {\r\n        //     color: theme.palette.warning.light,\r\n        //     cursor: 'pointer',\r\n        // width: '180px',\r\n        display:'inline'\r\n    \r\n        }\r\n}));\r\n\r\n// ==============================|| DASHBOARD - TOTAL INCOME DARK CARD ||============================== //\r\n\r\nexport interface CardInfoProps {\r\n    primary_text: string;\r\n    is_attack_or_info:boolean;\r\n    secondary_text?: string;\r\n\r\n}\r\n\r\nconst CardInfo = ({ primary_text ,is_attack_or_info, secondary_text}: CardInfoProps) => {\r\n    const under_attack = primary_text === ' under attack';\r\n    let marginLeft_size;\r\n    switch(primary_text.length){\r\n        case 1:\r\n            marginLeft_size= 1\r\n            break;\r\n        case 2:\r\n            marginLeft_size=0.2\r\n            break\r\n        case 3:\r\n            marginLeft_size=-0.1\r\n            break\r\n        case 4:\r\n        case 5:\r\n            marginLeft_size=-0.5\r\n            break\r\n        default:\r\n            marginLeft_size=-1.7\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <CardWrapper border={false} open={is_attack_or_info} sx={{ backgroundColor:is_attack_or_info? under_attack ? 'error.dark' : 'secondary.dark' : 'primary.dark'}} content={false}>\r\n              { is_attack_or_info? <Box sx={{ pt: 2, pl: 3 }}>\r\n                    <List sx={{ py: 0 }}>\r\n                        <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\r\n                            <div className={under_attack ? 'no' : styles.close}>\r\n                                <ListItemText\r\n                                    sx={{\r\n                                        py: 0,\r\n                                        mt: 0.45,\r\n                                        mb: 0.45,\r\n                                        zIndex: 1\r\n                                    }}\r\n                                    primary={\r\n                                        under_attack ? (\r\n                                            <Typography variant=\"h4\" sx={{ color: 'warning.dark', ml: -1 }}>\r\n                               <FormattedMessage id=\"under_attack_circle\" />\r\n                                            </Typography>\r\n                                        ) : (\r\n                                            <Typography\r\n                                                variant=\"h5\"\r\n                                                sx={{\r\n                                                    color: 'darkSecondary200',\r\n                                                    ml: -2,\r\n                                                    mt: 0.5,\r\n                                                    fontWeight: 4,\r\n                                                    fontFamily: `'Roboto', sans-serif`\r\n                                                }}\r\n                                            >\r\n                               <FormattedMessage id=\"notunder_attack_circle\" />\r\n\r\n                                            </Typography>\r\n                                        )\r\n                                    }\r\n                                    secondary={\r\n                                        under_attack ? (\r\n                                            <ReportIcon sx={{ color: 'warning.dark', ml: 1, flexGrow: 1 }} />\r\n                                        ) : (\r\n                                            <GppGoodIcon sx={{ color: 'secondary.light', ml: 1, flexGrow: 1 }} />\r\n                                        )\r\n                                    }\r\n                                />\r\n                            </div>\r\n                        </ListItem>\r\n                    </List>\r\n                </Box>\r\n          :\r\n          \r\n          \r\n          <Box sx={{ pt: 3, pl: 3 }}>\r\n          <List sx={{ py: 0 }}>\r\n              <ListItem alignItems=\"center\" disableGutters sx={{ py: 0, width: 1.0 }}>\r\n                  <ListItemText\r\n                      sx={{\r\n                          py: 0,\r\n                          mt: 0.45,\r\n                          mb: 0.45,\r\n                          mr: 5\r\n                      }}\r\n                      primary={\r\n                          <Grid display='flex' direction='column'>\r\n\r\n                          <Typography\r\n                          className=\"my__unique__button__class-asdf123\"\r\n                          display='none'\r\n                              variant=\"h4\"\r\n                              sx={{\r\n                                  zIndex:2010,\r\n                                  color: '#fff',\r\n\r\n                                  // textDecorationColor:'red',\r\n                                  mt:'-0.9rem',\r\n                                  ml: '-.41rem',\r\n                                  textAlign: 'center',\r\n                                  alignItems: 'center',\r\n                                  alignContent: 'center'\r\n                              }}\r\n                          >\r\n                             TOTAL\r\n                          </Typography>\r\n                          <Typography\r\n                              variant=\"h4\"\r\n                              sx={{ color: '#fff', \r\n                              textAlign: 'center', alignItems: 'center', alignContent: 'center',\r\n                               ml: marginLeft_size \r\n                              }}\r\n                          >\r\n                              {primary_text}\r\n                              {/* 113 */}\r\n                          </Typography>\r\n                          </Grid>\r\n                           }\r\n                      secondary={\r\n\r\n                          <Typography\r\n                              variant=\"h4\"\r\n                              sx={{\r\n                              direction:'row',\r\n                                  color: '#fff',\r\n                                  left: '22%',\r\n                                  textAlign: 'center',\r\n                                  alignItems: 'center',\r\n                                  alignContent: 'center'\r\n                              }}\r\n                          >\r\n                              {secondary_text}\r\n                          </Typography>\r\n                        \r\n\r\n                      }\r\n                  />\r\n              </ListItem>\r\n          </List>\r\n      </Box>\r\n          \r\n          }</CardWrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CardInfo;\r\n","import { useEffect, useState } from 'react';\nimport {\n    // useTheme,\n    styled\n} from '@mui/material/styles';\n\n// material-ui\nimport { Grid, Typography } from '@mui/material';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SubCard from 'ui-component/cards/SubCard';\n\n// import CardInfo from './CardInfo';\n// import Gauge from './Gauge';\nimport CardAttack from './CardAttack';\nimport GaugeChart from 'react-gauge-chart';\nimport { DashboardTabEnum, DefaultRootStateProps, Model } from 'types';\nimport { useSelector } from 'react-redux';\nimport { pydict } from 'utils';\nimport { FormattedMessage } from 'react-intl';\nimport useAuth from 'common/hooks/useAuth';\n// import { make_total_with_totals_api, default_totals } from 'utils/transformation/gauge_info';\n// import { Dashborad } from 'types/dashboard/Dashboard';\nimport { DashboradTotals } from 'utils/transformation/gauge_info';\nimport ReactLoading from \"react-loading\";\n\n// todo make util function for the reduce calulation\n\nconst FooterSubWrapper = styled('div')(({ theme }) => ({\n    [theme.breakpoints.up(1700)]: {\n        marginLeft: '-1.81rem'\n    }\n}));\n\nconst Dashboard = ({ model_name }: Model) => {\n    const dashboard_data = useSelector((state: DefaultRootStateProps) => state.dashboard[model_name as 'networks']);\n    const totals: DashboradTotals = pydict(dashboard_data, `dashboard_class.totals`, false);\n\n    // const context = useSelector((state: DefaultRootStateProps) => state.context[model_name as 'networks']);\n    const { permissions } = useAuth();\n    const style:any = {\n        sub_card_info :{ contentSX:{   m: -2.5,   p: -2.5,   '&:hover .tooltip': {       zIndex: 1,       color: 'black'   }}},\n        grid_typography: { item: true, display: \"flex\", direction: \"row\", justifyContent: \"center\",},\n        typography_gauge: { justifyContent: \"center\",sx:{ zIndex: -2010, color: '#fff', mt: '-0.99rem', textAlign: 'center', alignItems: 'center', alignContent: 'center' }},\n        main_grid: { container: true,  xs: 12,  justifyContent:'center'},\n        table_attack_grid: { item: true,  xs: 12,  md: 4, lg: 3.5, xl: 2.1,},\n        table_model_grid: { item: true,  xs: 12,  md: 4, lg: 3.5, xl: 1.65},\n    }\n\n    const [gauge_bps_pps, setgauge_bps_pps] = useState<JSX.Element[]>(Array(2).fill(<ReactLoading  type='cubes' color='primary'/>));\n    // const [max_time, setMax_time] = useState<string>('');\n    useEffect(() => {\n       \n        if(totals  ){\n        const gauge_bps_pps_to_set = totals.get_total_for_info( model_name).map((total: any) => {\n            return (\n                <Grid lg={5} item>\n                    <SubCard\n                        title={total.title}\n                        {...style.sub_card_info}\n                     \n                    >\n                        {/* <Gauge/> */}\n                        <Grid {...style.grid_typography}  >\n                            <Typography\n                            {...style.typography_gauge}\n                            >\n                                <FormattedMessage id={total.text} />\n                            </Typography>\n                        </Grid>\n                        <Grid item display=\"flex\" direction=\"row\" justifyContent=\"space-between\">\n                            <Grid item lg={3} md={6} sm={6} xs={12} ml={4}>\n                                <CardAttack\n                                    is_attack_or_info={false}\n                                    primary_text={total.bps.value.toString()}\n                                    secondary_text={total.bps.text}\n                                />\n                            </Grid>\n\n                            <Grid item lg={6} md={6} sm={6} xs={12} ml={1} mt={-1} justifyContent=\"center\">\n                                <GaugeChart\n                                    id=\"gauge-chart4\"\n                                    textColor=\"black\"\n                                    style={{\n                                        width: '13rem',\n                                        height: '5rem',\n                                        // marginLeft:'1.1rem',\n                                        alignItems: 'center',\n                                        alignContent: 'center'\n                                    }}\n                                    arcsLength={[0.4, 0.4, 0.2]}\n                                    nrOfLevels={10}\n                                    arcPadding={0.1}\n                                    cornerRadius={3}\n                                    percent={total.gauge}\n                                />\n                                <FooterSubWrapper>\n                                    <Typography\n                                        variant=\"h4\"\n                                        sx={{\n                                            zIndex: 2010,\n                                            textAlign: 'center',\n                                            alignItems: 'center',\n                                            alignContent: 'center'\n                                        }}\n                                    >\n                                        of account’s bandwidth\n                                    </Typography>\n                                </FooterSubWrapper>\n                            </Grid>\n                            <Grid item lg={3} md={6} sm={6} xs={12} ml={4}>\n                                <CardAttack is_attack_or_info={false} primary_text={total.pps.toString()} secondary_text=\"PPS\" />\n                            </Grid>\n                        </Grid>\n                    </SubCard>\n                </Grid>\n            );\n        });\n        // setMax_time(totals.max_time)\n        setgauge_bps_pps(gauge_bps_pps_to_set);}\n    }, [totals, model_name]);\n\n    return (\n        <MainCard sx={{ width: 0.98, ml: 1, mt: -1 }}>\n            <Grid\n                container\n                mt={-3}\n                mb={-3}\n                lg={12}\n                xs={12}\n                spacing={0}\n                marginTop={-4}\n                marginBottom={-4}\n                paddingTop={-4}\n                display=\"flex\"\n                direction=\"row\"\n                justifyContent={\n                    model_name !== DashboardTabEnum.ATTACKS_TABLE || permissions.has_client_flowspec_device ? 'space-between' : 'center'\n                }\n            >\n                {gauge_bps_pps[0]}\n\n                <Grid item lg={1} md={6} sm={6} xs={12} mt={5}>\n                    <CardAttack is_attack_or_info primary_text={`${totals && totals.under_attack ? ' ' : 'not '}under attack`} />\n                </Grid>\n                {model_name !== DashboardTabEnum.ATTACKS_TABLE || permissions.has_client_flowspec_device ? gauge_bps_pps[1] : null}\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default Dashboard;\n","import { Grid } from '@mui/material';\nimport React from 'react';\nimport {  useSelector } from 'react-redux';\nimport { DefaultRootStateProps, DashboardTabEnum, Model } from 'types';\nimport useApi from 'common/hooks/useApi';\n\nimport ManageDash from './Default';\nimport Info from './Info';\nimport { useActions } from 'store/actions';\nimport HocNavigate from 'common/hooks/useNavigate';\nimport { pydict } from 'utils';\n\n\nconst MainDashboard = ({ model_name }: Model) => {\n    const { set_dashbord } = useActions();\n    const navigate = HocNavigate();\n\n    const model: DashboardTabEnum = model_name as DashboardTabEnum;\n    \n    const dashboard_state = pydict(useSelector((state: DefaultRootStateProps) => state.dashboard), model,{});\n\n\n\n    const savedCallback: any = React.useRef();\n\n     \n    const getPostsApi =   useApi(set_dashbord)\n\n    const update_dashboard = () => {\n\n        const body = navigate.get_body_dashboard(-1, model, dashboard_state)\n\n        getPostsApi.request(model as string, body[0])\n\n    };\n    React.useEffect(() => {\n        savedCallback.current = update_dashboard;\n    }, [update_dashboard]);\n\n    React.useEffect(() => {\n \n        \n        update_dashboard()\n        const timer = setInterval(\n            () => savedCallback.current(),\n            6000 * 222\n            // 60*1000\n        );\n        return () => clearInterval(timer);\n    }, [model_name]);\n\n \n\n    return (\n <>\n              <Info model_name={model} />\n            <Grid container xs={12}>\n           <ManageDash model_name={model} />\n            </Grid></> \n    );\n};\n\nexport default MainDashboard;\n","import { IconButton, TableCell, TableRow, Grid, Typography } from '@mui/material';\nimport { matrieal_icons } from 'common/menu-items/application';\nimport { NavigationEnum } from 'types';\nimport { objApi, pydict } from 'utils';\nimport { FormattedMessage } from 'react-intl';\nimport fileDownload from 'js-file-download';\nimport { useDispatch } from 'react-redux';\n\ninterface PropsRowTable {\n    cells: string[];\n    model: NavigationEnum;\n    row_obj: any;\n    index: number;\n}\nconst RowTable = ({ cells, model, row_obj, index }: PropsRowTable) => {\n    const dispatch = useDispatch();\n    \n    const handleDownload = async (download_url: string, filename: string) => {\n        const ans = await objApi.get(`${download_url}`, dispatch, {\n            responseType: 'blob'\n        });\n\n        fileDownload(ans[1], `${filename}.pdf`);\n    };\n    return (\n        <TableRow hover role=\"checkbox\" aria-checked tabIndex={-1} key={index}>\n            {cells.map((cell: string) => {\n                return (\n                    <TableCell sx={{ p: 0 }} align=\"center\">\n                        <Grid sx={{ display: 'flex', direction: 'row', justifyContent: 'space-evenly' }}>\n                            {!['download_url'].includes(cell) ? (\n                                !['report_type'].includes(cell) ? (\n                                    <Typography minWidth={20} alignContent=\"center\">\n                                        {pydict(row_obj, cell, ' ')}\n                                    </Typography>\n                                ) : (\n                                    <FormattedMessage id={pydict(row_obj, cell, ' ')} />\n                                )\n                            ) : (\n                                <IconButton\n                                    color=\"primary\"\n                                    size=\"large\"\n                                    onClick={() => {\n                                        handleDownload(row_obj[cell], row_obj['account']);\n                                    }}\n                                >\n                                    <matrieal_icons.FileDownloadIcon sx={{ fontSize: '1.3rem' }} />\n                                </IconButton>\n                            )}\n                        </Grid>\n                    </TableCell>\n                );\n            })}\n        </TableRow>\n    );\n};\n\nexport default RowTable;\n","import { Grid,  Table,  TableBody, TableContainer } from '@mui/material';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { EnhancedTableHead } from '../table_model/TableHeader';\r\n\r\nimport {  HeadCell, headCellsReport, NavigationEnum, report_fields } from 'types';\r\n\r\nimport useAuth from 'common/hooks/useAuth';\r\n\r\nimport RowTable from './RowTable';\r\nimport HocNavigate from 'common/hooks/useNavigate';\r\nimport React from 'react';\r\n\r\n\r\ninterface Props {\r\n    cells: string[];\r\n    rows: any[];\r\n    model: NavigationEnum;\r\n    headCells: HeadCell[];\r\n}\r\nconst TableList = ({ cells, model, headCells, rows }: Props) => {\r\n \r\n    return (\r\n        <MainCard headerSX={{ textAlign: 'center' }} title={model.toUpperCase().split('_').join(' ')} content={false}>\r\n    \r\n            <TableContainer>\r\n                <Table sx={{ minWidth: 750 }}>\r\n                    <EnhancedTableHead\r\n                        headers={headCells}\r\n                        // numSelected={selected.length}\r\n                        order='asc'\r\n                        orderBy='sort'\r\n                        rowCount={rows ? rows.length : 0}\r\n                    />\r\n                    <TableBody>\r\n                        {\r\n                            rows &&\r\n                                rows.map((row, index) => {\r\n                                    if (typeof row === 'number') return null;\r\n\r\n                                    return (\r\n                                        <RowTable\r\n                                            cells={cells}\r\n                                            model={model}\r\n                                            row_obj={row}\r\n                                            index={index}\r\n                                        />\r\n                                    );\r\n                                })\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n \r\n        </MainCard>\r\n    );\r\n};\r\n\r\nconst ReportTableMain = () => {\r\n \r\n    const [rows, setRows] = React.useState<any[]>([]);\r\n    const { permissions } = useAuth();\r\n\r\n    const [cells, headCells] =[report_fields, headCellsReport]\r\n    const navigate = HocNavigate();\r\n  \r\n    const fetch_data = async ( ) => {\r\n        const ans = await navigate.get_report()\r\n        \r\n        if(ans[0] && permissions.accounts){\r\n            const rows_with_account = ans[1].map((row:any)=> {return{...row, account: permissions.accounts[row['account']]} })\r\n        setRows(rows_with_account)\r\n }\r\n   \r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        permissions && fetch_data()\r\n\r\n    },[permissions])\r\n    \r\n    return (\r\n        <Grid  alignContent='right' justifyItems='right' justifyContent='right'>\r\n                    <MainCard>\r\n            <TableList\r\n            cells={cells}\r\n            rows={rows}\r\n\r\n            model={NavigationEnum.REPORTS}\r\n            headCells={headCells}\r\n        />\r\n                    </MainCard>\r\n             \r\n           \r\n        </Grid>\r\n \r\n    );\r\n};\r\n\r\nexport default ReportTableMain;\r\n","import NetworkCheckIcon from '@mui/icons-material/NetworkCheck';\nimport RouterIcon from '@mui/icons-material/Router';\nimport GppMaybeIcon from '@mui/icons-material/GppMaybe';\nimport AssessmentIcon from '@mui/icons-material/Assessment';\nimport { NavigationEnum } from 'types';\n\nexport const tabsOption = [\n    {\n        label: NavigationEnum.NETWORKS_TABLE,\n        icon: <NetworkCheckIcon />\n    },\n    {\n        label: NavigationEnum.DEVICES_TABLE,\n        icon: <RouterIcon />,\n    },\n    {\n        label: NavigationEnum.ATTACKS_TABLE,\n        icon: <GppMaybeIcon />,\n    },\n    {\n        label: NavigationEnum.REPORTS,\n        icon: <AssessmentIcon />,\n    },\n\n\n];\n","import { Grid } from '@mui/material';\r\nimport {  useParams } from 'react-router-dom';\r\nimport {  DashboardTabEnum, NavigationEnum } from 'types';\r\n\r\nimport HeaderDashBoard from './header/HeaderDashBoard';\r\nimport MainDashboard from './MainDashboard';\r\nimport useAuth from 'common/hooks/useAuth';\r\nimport HocNavigate from 'common/hooks/useNavigate';\r\nimport ReportTableMain from 'views/secunity-ui/Table/table_report/TableBase';\r\nimport { tabsOption } from './header/tabs_options';\r\n       \r\n\r\n\r\nconst Dashboard = () => {\r\n    const params = useParams();\r\n    const { permissions } = useAuth();\r\n    // const { set_dashbord } = useActions();\r\n    const navigate = HocNavigate();\r\n\r\n    const { model_name } = params;\r\n    let model: any = model_name as DashboardTabEnum;\r\n    const tabsOption_filterd = tabsOption.filter((item)=>item.label!== NavigationEnum.DEVICES_TABLE || permissions.has_client_flowspec_device)\r\n\r\n    if (model === undefined  ) {\r\n        const val = parseInt(localStorage.getItem('dashboard_tab') || '0', 10);\r\n        model = tabsOption[val].label\r\n       \r\n        navigate.request_navigate(`dashboard/${model}`)\r\n    }\r\n \r\n    return (\r\n        <Grid container  justifyContent='center' spacing={0} lg={12}>\r\n            <Grid container spacing={0} mt={-3} lg={12}>\r\n            <HeaderDashBoard tabsOption={tabsOption_filterd}/>\r\n            </Grid>\r\n            {model!==NavigationEnum.REPORTS ? <MainDashboard model_name={model}/>: <ReportTableMain/>}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}