{"version":3,"sources":["ui-component/cards/SubCard.tsx","views/secunity-ui/profile/Account.tsx","views/secunity-ui/profile/RateLimitView.tsx","views/secunity-ui/profile/Profile.tsx","views/secunity-ui/profile/style_profile.ts","views/secunity-ui/profile/index.tsx"],"names":["SubCard","React","forwardRef","ref","children","content","className","contentClass","secondary","sx","contentSX","title","others","theme","useTheme","useIntl","formatMessage","id","error","console","log","border","alignContent","margin","borderColor","palette","mode","dark","light","primary","boxShadow","p","textAlign","variant","action","opacity","defaultProps","useStyles","makeStyles","icon","fontSize","typography_title","typography_value","align","linearPro","width","color","linear_pro_mainbox","display","alignItems","linear_pro_line_box","mr","linear_pro_text_box","minWidth","LinearProgressWithLabel","props","value","classes","Box","LinearProgress","Typography","Math","round","ProfileAccount","form","Grid","item","lg","xs","container","spacing","zeroMinWidth","name","type","List","component","ListItemButton","ListItemIcon","KeyIcon","ListItemText","ListItemSecondaryAction","xflow_identifier","Divider","BrokenImageIcon","Language","BANDWIDTH","pydict","toUpperCase","bandwidth","PinDropTwoToneIcon","map","flag","Chip","label","size","ml","m","direction","AppBlockingIcon","flexGrow","blackhole","enabled","BeenhereIcon","DoNotDisturbOnTotalSilenceIcon","threshold","MailTwoToneIcon","community_attacks_emails","DoNotDisturbIcon","RateLimitView","ports","mt","RATE_LIMIT__PORTS","rate","justifyContent","port","PORT","bps","MBPS","get_fields","model","NavigationEnum","DEVICES_TABLE","Device_Enum","ACCOUNT_USERS_TABLE","User_Enum","NETWORKS_TABLE","Network_Enum","ACCOUNTS_TABLE","Account_Enum","split_key","str","split","Profile","information","INFORMATION","Iddd","matrieal_icons","DomainVerificationIcon","style_profile","main_grid","gridSpacing","sub_main_grid","button_grid","height","padding","button","borderRadius","sub_profile_grid","sub_sub_profile_grid","F5_FW","TableContainer","Table","borderBottom","TableBody","Object","values","row","t_val","keys","key","TableRow","TableCell","capitalize_array","undefined","Account","CONTROLLER_XFLOW","CLIENT_FLOWSPEC","THRESHOLD","key1","includes","val","flat","ProfileMain","permissions","useAuth","dispatch","useDispatch","navigate","useNavigate","hoc_navigate","HocNavigate","params","model_name","useState","setForm","useEffect","fetch_model_by_id","then","res","success","obj","MainCard","Button","onClick","can_edit_context_account","event","preventDefault","request_navigate","Link","href","get_prefix_to_navigate","underline"],"mappings":"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","file":"static/js/13.e14ba6f4.chunk.js","sourcesContent":["import React, { ReactNode, Ref } from 'react';\r\nimport {  useIntl} from 'react-intl';\r\n\r\n\r\n\r\n\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\nexport interface SubCardProps {\r\n    children: ReactNode | string | null;\r\n    content?: boolean;\r\n    className?: string;\r\n    contentClass?: string;\r\n    // darkTitle?: boolean;\r\n    secondary?: ReactNode | string | {};\r\n    sx?: {};\r\n    contentSX?: {};\r\n    title?: ReactNode | string | {};\r\n}\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = React.forwardRef(\r\n    (\r\n        { children, className, content, contentClass,  secondary, sx = {}, contentSX = {}, title, ...others }: SubCardProps,\r\n        ref: Ref<HTMLDivElement>\r\n    ) => {\r\n        const theme = useTheme();\r\n        try{\r\n\r\n            if(typeof title==='string')\r\n                title = useIntl().formatMessage({id:title});\r\n                \r\n        }\r\n        catch(error){\r\n            console.log(title, error);\r\n            \r\n        }\r\n       \r\n        return (\r\n            <Card\r\n            \r\n                ref={ref}\r\n                \r\n                sx={{\r\n                    \r\n                    border: '1px solid',\r\n                    alignContent:'center',\r\n                    margin:'1rem',\r\n          \r\n            \r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                    ':hover': {\r\n                        boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                    },\r\n                    \r\n                    ...sx\r\n                \r\n                }}\r\n                {...others}\r\n            >\r\n                {/* card header and action */}\r\n                {title && (\r\n                    <CardHeader sx={{ p: 2.5, textAlign:'center',...contentSX }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />\r\n                )}\r\n                {/* {darkTitle && title && (\r\n                    <CardHeader sx={{ p: 2.5 , textAlign:'center',...contentSX }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />\r\n                )} */}\r\n{/* sx={{textAlign:'center'}} */}\r\n                {/* content & header divider */}\r\n                {title && (\r\n                    <Divider\r\n                        sx={{\r\n                            opacity: 1,\r\n                            borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent  sx={{ \r\n                        \r\n                        p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n","// material-ui\r\nimport {\r\n    Box,\r\n    Divider,\r\n    Grid,\r\n    LinearProgress,\r\n    LinearProgressProps,\r\n    List,\r\n    ListItemButton,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Typography,\r\n    Chip\r\n} from '@mui/material';\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { matrieal_icons } from 'common/menu-items/application';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { pydict } from 'utils';\r\nimport { Language } from 'types';\r\n\r\nconst useStyles = makeStyles({\r\n    icon: { fontSize: '1.3rem' },\r\n    typography_title: { variant: 'subtitle1' },\r\n    typography_value: { variant: 'subtitle2', align: 'right' },\r\n    linearPro: { width: '80%', color: 'primary' },\r\n    linear_pro_mainbox: { display: 'flex', alignItems: 'center' },\r\n    linear_pro_line_box: { width: '100%', mr: 1 },\r\n    linear_pro_text_box: { minWidth: 35 }\r\n});\r\n\r\nfunction LinearProgressWithLabel(props: LinearProgressProps) {\r\n    const { value } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box className={classes.linear_pro_mainbox}>\r\n            <Box className={classes.linear_pro_line_box}>\r\n                <LinearProgress {...props} />\r\n            </Box>\r\n            <Box className={classes.linear_pro_text_box}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(value!)}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst ProfileAccount = ({ form }: any) => {\r\n    const classes = useStyles();\r\n\r\n    const bandwidth = () => {\r\n        try {\r\n            return [\r\n                <ListItemButton>\r\n                    <ListItemIcon>\r\n                        <matrieal_icons.BrokenImageIcon className={classes.icon} />\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        primary={\r\n                            <Typography variant=\"subtitle1\" className={classes.typography_title}>\r\n                                {' '}\r\n                                <FormattedMessage id={Language.BANDWIDTH} />\r\n                            </Typography>\r\n                        }\r\n                    />\r\n\r\n                    <ListItemSecondaryAction>\r\n                        <Typography className={classes.typography_value} variant=\"subtitle2\">\r\n                            {`${pydict(form, 'link_capacity.relative_value')}         ${pydict(\r\n                                form,\r\n                                'link_capacity.unit',\r\n                                ''\r\n                            ).toUpperCase()}`}\r\n                        </Typography>\r\n                    </ListItemSecondaryAction>\r\n                </ListItemButton>,\r\n                <Divider />\r\n            ];\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n    const threshold = () => {\r\n        try {\r\n            return [\r\n                <Grid m={2} item display=\"flex\" direction=\"row\">\r\n                    <ListItemIcon>\r\n                        <matrieal_icons.AppBlockingIcon className={classes.icon} />\r\n                    </ListItemIcon>\r\n\r\n                    <Typography variant=\"subtitle1\" className={classes.typography_title}>\r\n                        {' '}\r\n                        <FormattedMessage id=\"blackhole\" />\r\n                    </Typography>\r\n                    <ListItemIcon>\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n\r\n                        {form.blackhole.enabled ? (\r\n                            <matrieal_icons.BeenhereIcon className={classes.icon} />\r\n                        ) : (\r\n                            <matrieal_icons.DoNotDisturbOnTotalSilenceIcon className={classes.icon} />\r\n                        )}\r\n                    </ListItemIcon>\r\n                </Grid>,\r\n                form.blackhole.enabled && (\r\n                    <LinearProgressWithLabel\r\n                        className={classes.linearPro}\r\n                        variant=\"determinate\"\r\n                        value={pydict(form, 'blackhole.threshold')}\r\n                    />\r\n                ),\r\n\r\n                <Divider />\r\n            ];\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // const icons = [matrieal_icons.KeyIcon, matrieal_icons.PinDropTwoToneIcon]\r\n    // \"xflow_identifier\", \"asns\", \"community_attacks_emails\",\r\n    return (\r\n        <Grid item lg={5} xs={6}>\r\n            <SubCard\r\n                title={\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item xs zeroMinWidth>\r\n                            <Typography align=\"left\" variant=\"subtitle1\" fontSize=\"1.2rem\">\r\n                                {form.name}\r\n                            </Typography>\r\n                            <Typography align=\"left\" variant=\"subtitle2\" fontSize=\"1.1rem\">\r\n                                {form.type}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            >\r\n                <List component=\"nav\">\r\n                    <ListItemButton>\r\n                        <ListItemIcon>\r\n                            <matrieal_icons.KeyIcon className={classes.icon} />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography className={classes.typography_title} variant=\"subtitle1\">\r\n                                    <FormattedMessage id=\"xflow_identifier\" />\r\n                                </Typography>\r\n                            }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"subtitle2\" className={classes.typography_value}>\r\n                                {`${form.xflow_identifier}`}\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    {bandwidth()}\r\n\r\n                    <ListItemButton>\r\n                        <ListItemIcon>\r\n                            <matrieal_icons.PinDropTwoToneIcon sx={{ fontSize: '1.3rem' }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography variant=\"subtitle1\">\r\n                                    <FormattedMessage id=\"asns\" />\r\n                                </Typography>\r\n                            }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"subtitle2\" align=\"right\">\r\n                                {pydict(form, 'asns', []).map((flag: string) => (\r\n                                    <Chip label={flag} color=\"primary\" size=\"small\" sx={{ ml: 1 }} />\r\n                                ))}\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                </List>\r\n                <Divider />\r\n\r\n                {threshold()}\r\n                <Grid m={2} item display=\"flex\" direction=\"row\">\r\n                    <ListItemIcon>\r\n                        <matrieal_icons.MailTwoToneIcon className={classes.icon} />\r\n                    </ListItemIcon>\r\n                    <Typography className={classes.typography_title}>\r\n                        <FormattedMessage id=\"community_attacks_emails\" />\r\n                    </Typography>\r\n                    <ListItemIcon>\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n\r\n                        {form.community_attacks_emails ? (\r\n                            <matrieal_icons.BeenhereIcon className={classes.icon} />\r\n                        ) : (\r\n                            <matrieal_icons.DoNotDisturbIcon className={classes.icon} />\r\n                        )}\r\n                    </ListItemIcon>\r\n                </Grid>\r\n            </SubCard>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ProfileAccount;\r\n","// material-ui\nimport { Grid, Typography } from '@mui/material';\n\nimport SubCard from 'ui-component/cards/SubCard';\nimport { FormattedMessage } from 'react-intl';\nimport { Language } from 'types';\n\nconst RateLimitView = ({ ports }: any) => {\n    console.log(ports);\n\n    return (\n        <Grid container lg={2} direction=\"column\" spacing={3} mt={3} ml={0.3}>\n            <SubCard title={Language.RATE_LIMIT__PORTS}>\n                {ports.map((rate: any) => (\n                    <Grid item spacing={3} mt={1} justifyContent=\"space-around\" alignContent=\"center\" display=\"flex\" direction=\"row\">\n                        <Grid>\n                            <Typography align=\"center\" variant=\"h3\">\n                                {rate.port}\n                            </Typography>\n                            <Typography align=\"center\" variant=\"subtitle2\">\n                                <FormattedMessage id={Language.PORT} />\n                            </Typography>\n                        </Grid>\n                        <Grid>\n                            <Typography align=\"center\" variant=\"h3\">\n                                {rate.bps}\n                            </Typography>\n                            <Typography align=\"center\" variant=\"subtitle2\">\n                                <FormattedMessage id={Language.MBPS} />\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                ))}\n            </SubCard>\n        </Grid>\n    );\n};\nexport default RateLimitView;\n","import Account from './Account';\r\nimport RateLimitView from './RateLimitView';\r\n\r\n// material-ui\r\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableRow } from '@mui/material';\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport { gridSpacing } from 'store/template/constant';\r\nimport { capitalize_array, pydict } from 'utils';\r\nimport { useIntl } from 'react-intl';\r\nimport { Device_Enum, Language, User_Enum, Network_Enum, Account_Enum, NavigationEnum } from 'types';\r\nimport { matrieal_icons } from 'common/menu-items/application';\r\n// import style_profile from './style_profile';\r\n\r\n// todo need to change to pydict and cut header\r\nconst get_fields = (model: NavigationEnum) => {\r\n    switch (model) {\r\n        case NavigationEnum.DEVICES_TABLE:\r\n            return Device_Enum;\r\n        case NavigationEnum.ACCOUNT_USERS_TABLE:\r\n            return User_Enum;\r\n        case NavigationEnum.NETWORKS_TABLE:\r\n            return Network_Enum;\r\n        case NavigationEnum.ACCOUNTS_TABLE:\r\n            return Account_Enum;\r\n        default:\r\n            return Account_Enum;\r\n    }\r\n};\r\nconst split_key = (str: string): string[] => str.split(/[._]/);\r\n\r\nconst Profile = ({ form, model }: any) => {\r\n    const information = useIntl().formatMessage({ id: Language.INFORMATION });\r\n    // console.log(form);\r\n    const Iddd = matrieal_icons.DomainVerificationIcon;\r\n    const style_profile: any = {\r\n        main_grid: { container: true, spacing: gridSpacing },\r\n        sub_main_grid: { item: true, xs: 12 },\r\n        button_grid: {\r\n            container: true,\r\n            height: 2,\r\n            margin: '.1rem 1rem',\r\n            padding: '1.3rem 10rem',\r\n            alignContent: 'center',\r\n            justifyContent: 'space-around'\r\n        },\r\n        button: { sx: { borderRadius: '1rem' }, variant: 'contained', color: 'secondary' },\r\n        sub_profile_grid: { item: true, xs: 12, lg:4 },\r\n        sub_sub_profile_grid: { container: true, direction: \"column\", spacing: gridSpacing },\r\n    };\r\n    console.log( pydict(form, Language.F5_FW) );\r\n    \r\n    return (\r\n        <Grid {...style_profile.main_grid}>\r\n            <Grid {...style_profile.sub_profile_grid}>\r\n                <Grid  {...style_profile.sub_sub_profile_grid} >\r\n                    <Grid {...style_profile.sub_main_grid}>\r\n                        <SubCard title={model.toUpperCase()}>\r\n                            <Grid container direction=\"column\" spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <TableContainer>\r\n                                        <Table\r\n                                            sx={{\r\n                                                '& td': {\r\n                                                    borderBottom: 'none'\r\n                                                }\r\n                                            }}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <TableBody>\r\n                                                {Object.values(get_fields(model)).map((row: string) => {\r\n                                                    const t_val = pydict(form, row);\r\n                                                    return typeof t_val === 'object' ? (\r\n                                                        Object.keys(form[row]).map((key: string) => (\r\n                                                            <TableRow key={key}>\r\n                                                                <TableCell variant=\"head\">{capitalize_array(split_key(key))}</TableCell>\r\n                                                                <TableCell>\r\n                                                                    {typeof t_val[key] === 'boolean' ? (\r\n                                                                        t_val[key] ? (\r\n                                                                            <matrieal_icons.DomainVerificationIcon\r\n                                                                                sx={{ fontSize: '1.3rem' }}\r\n                                                                            />\r\n                                                                        ) : (\r\n                                                                            <matrieal_icons.DoNotDisturbIcon sx={{ fontSize: '1.3rem' }} />\r\n                                                                        )\r\n                                                                    ) : (\r\n                                                                        t_val[key]\r\n                                                                    )}\r\n                                                                </TableCell>\r\n                                                            </TableRow>\r\n                                                        ))\r\n                                                    ) : t_val !== undefined ? (\r\n                                                        <TableRow key={row}>\r\n                                                            <TableCell variant=\"head\">{capitalize_array(split_key(row))}</TableCell>\r\n                                                            <TableCell>\r\n                                                                {typeof t_val === 'boolean' ? (\r\n                                                                    t_val ? (\r\n                                                                        <Iddd sx={{ fontSize: '1.3rem' }} />\r\n                                                                    ) : (\r\n                                                                        <matrieal_icons.DoNotDisturbIcon sx={{ fontSize: '1.3rem' }} />\r\n                                                                    )\r\n                                                                ) : (\r\n                                                                    t_val\r\n                                                                )}\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    ) : null;\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {model === 'accounts' && <Account form={form} />}\r\n\r\n            {pydict(form, Language.RATE_LIMIT__PORTS) && <RateLimitView ports={pydict(form, Language.RATE_LIMIT__PORTS)} />}\r\n            {[Language.CONTROLLER_XFLOW, Language.CLIENT_FLOWSPEC, Language.THRESHOLD, Language.F5_FW ].map(\r\n                (key: string) =>\r\n                    pydict(form, key) && (\r\n                        //  { form['controller_xflow'] &&\r\n                        <Grid item lg={3} xs={12}>\r\n                            <Grid container direction=\"column\" spacing={gridSpacing}>\r\n                                <Grid item xs={12}>\r\n                                    <SubCard title={`${capitalize_array(split_key(key))}  ${information}`}>\r\n                                        <Grid container direction=\"column\" spacing={2}>\r\n                                            <Grid item xs={12}>\r\n                                                <TableContainer>\r\n                                                    <Table\r\n                                                        sx={{\r\n                                                            '& td': {\r\n                                                                borderBottom: 'none'\r\n                                                            }\r\n                                                        }}\r\n                                                        size=\"small\"\r\n                                                    >\r\n                                                        <TableBody>\r\n                                                            {key !== Language.THRESHOLD\r\n                                                                ? Object.keys( pydict(form, key)).map(\r\n                                                                      (key1: string) =>\r\n                                                                          !['ssh', 'stats_settings'].includes(key1) && (\r\n                                                                              <TableRow key={key1}>\r\n                                                                                  <TableCell variant=\"head\">\r\n                                                                                      {capitalize_array(key1.split('_'))}\r\n                                                                                  </TableCell>\r\n                                                                                  <TableCell>\r\n                                                                                      {pydict(form, `${key}.${key1}`, ' ')}\r\n                                                                                  </TableCell>\r\n                                                                              </TableRow>\r\n                                                                          )\r\n                                                                  )\r\n                                                                : Object.keys(form[Language.THRESHOLD])\r\n                                                                      .map((key1: string) =>\r\n                                                                          Object.keys(form[Language.THRESHOLD][key1]).map((val: string) => (\r\n                                                                              <TableRow key={key1}>\r\n                                                                                  <TableCell variant=\"head\">\r\n                                                                                      {capitalize_array([key1, val])}\r\n                                                                                  </TableCell>\r\n                                                                                  <TableCell>\r\n                                                                                      {pydict(form[Language.THRESHOLD], `${key1}.${val}`)}\r\n                                                                                  </TableCell>\r\n                                                                              </TableRow>\r\n                                                                          ))\r\n                                                                      )\r\n                                                                      .flat(2)}\r\n                                                        </TableBody>\r\n                                                    </Table>\r\n                                                </TableContainer>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </SubCard>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\nexport default Profile;\r\n","import { gridSpacing } from \"store/template/constant\";\n\nconst style_profile: any = {\n    main_grid: { container: true, spacing: gridSpacing },\n    sub_main_grid: { item: true, xs: 12 },\n    button_grid: {\n        container: true,\n        height: 2,\n        margin: '.1rem 1rem',\n        padding: '1.3rem 10rem',\n        alignContent: 'center',\n        justifyContent: 'space-around'\n    },\n    button: { sx: { borderRadius: '1rem' }, variant: 'contained', color: 'secondary' }\n};\n    export default style_profile\n","import { Button, Grid, Link } from '@mui/material';\r\nimport React from 'react';\r\n\r\nimport Profile from './Profile';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport useAuth from 'common/hooks/useAuth';\r\n\r\nimport { FormattedMessage } from 'react-intl';\r\nimport HocNavigate from 'common/hooks/useNavigate';\r\nimport style_profile from './style_profile';\r\n\r\nconst ProfileMain = () => {\r\n    const { permissions } = useAuth();\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const hoc_navigate = HocNavigate();\r\n    const { id, model_name } = hoc_navigate.params;\r\n    const [form, setForm] = React.useState<any>(undefined);\r\n    React.useEffect(() => {\r\n        hoc_navigate.fetch_model_by_id(dispatch).then((res: any) => {\r\n            const [success, obj] = res;\r\n            if (success) setForm(obj);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <MainCard>\r\n            <Grid {...style_profile.main_grid}>\r\n                <Grid {...style_profile.sub_main_grid}>\r\n                    <Grid {...style_profile.button_grid}>\r\n                        <Button\r\n                            {...style_profile.button}\r\n                            onClick={() => {\r\n                                navigate(-1);\r\n                            }}\r\n                        >\r\n                            <FormattedMessage id=\"back_to_table\" />\r\n                        </Button>\r\n                        {permissions.can_edit_context_account &&\r\n                        <Button\r\n                            {...style_profile.button}\r\n                            onClick={(event) => {\r\n                                event.preventDefault();\r\n\r\n                                hoc_navigate.request_navigate(`forms/${model_name}/${id}`);\r\n                            }}\r\n                        >\r\n                            <Link href={`${hoc_navigate.get_prefix_to_navigate()}forms/${model_name}/${id}`} underline=\"none\" color=\"white\">\r\n                                <FormattedMessage id=\"edit\" />\r\n                            </Link>\r\n                        </Button>}\r\n                    </Grid>\r\n                    {form && <Profile model={model_name} form={form} />}\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default ProfileMain;\r\n"],"sourceRoot":""}